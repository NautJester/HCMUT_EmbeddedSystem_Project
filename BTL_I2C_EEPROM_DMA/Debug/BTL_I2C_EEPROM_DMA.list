
BTL_I2C_EEPROM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008070  08008070  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008078  08008078  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08008080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          000004dc  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005d4  200005d4  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c313  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d42  00000000  00000000  0002c47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a10  00000000  00000000  0002e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007dc  00000000  00000000  0002ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d7b  00000000  00000000  0002f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d9f9  00000000  00000000  00050127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6174  00000000  00000000  0005db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003274  00000000  00000000  00123c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00126f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007eac 	.word	0x08007eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08007eac 	.word	0x08007eac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	4613      	mov	r3, r2
 800058a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800058c:	88fa      	ldrh	r2, [r7, #6]
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2b3f      	cmp	r3, #63	; 0x3f
 8000594:	dc01      	bgt.n	800059a <bytestowrite+0x1e>
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	e003      	b.n	80005a2 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005a0:	b29b      	uxth	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	60ba      	str	r2, [r7, #8]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4603      	mov	r3, r0
 80005bc:	81fb      	strh	r3, [r7, #14]
 80005be:	460b      	mov	r3, r1
 80005c0:	81bb      	strh	r3, [r7, #12]
 80005c2:	4613      	mov	r3, r2
 80005c4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80005c6:	2306      	movs	r3, #6
 80005c8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80005ce:	88fa      	ldrh	r2, [r7, #6]
 80005d0:	89bb      	ldrh	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da00      	bge.n	80005da <EEPROM_Write+0x2a>
 80005d8:	333f      	adds	r3, #63	; 0x3f
 80005da:	119b      	asrs	r3, r3, #6
 80005dc:	b29a      	uxth	r2, r3
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	4413      	add	r3, r2
 80005e2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80005e4:	8b7a      	ldrh	r2, [r7, #26]
 80005e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3301      	adds	r3, #1
 80005ee:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
 80005f8:	e031      	b.n	800065e <EEPROM_Write+0xae>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80005fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b21a      	sxth	r2, r3
 8000604:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000608:	4313      	orrs	r3, r2
 800060a:	b21b      	sxth	r3, r3
 800060c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800060e:	89ba      	ldrh	r2, [r7, #12]
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffb1 	bl	800057c <bytestowrite>
 800061a:	4603      	mov	r3, r0
 800061c:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write_DMA(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);  // write the data to the EEPROM
 800061e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	4413      	add	r3, r2
 8000624:	8af9      	ldrh	r1, [r7, #22]
 8000626:	8aba      	ldrh	r2, [r7, #20]
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	460a      	mov	r2, r1
 8000630:	21a0      	movs	r1, #160	; 0xa0
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <EEPROM_Write+0xc0>)
 8000634:	f002 f91a 	bl	800286c <HAL_I2C_Mem_Write_DMA>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800063a:	3301      	adds	r3, #1
 800063c:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800063e:	2300      	movs	r3, #0
 8000640:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	8abb      	ldrh	r3, [r7, #20]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 800064a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800064c:	8abb      	ldrh	r3, [r7, #20]
 800064e:	4413      	add	r3, r2
 8000650:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000652:	2005      	movs	r0, #5
 8000654:	f000 ffde 	bl	8001614 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	3301      	adds	r3, #1
 800065c:	623b      	str	r3, [r7, #32]
 800065e:	8b3b      	ldrh	r3, [r7, #24]
 8000660:	6a3a      	ldr	r2, [r7, #32]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbc9      	blt.n	80005fa <EEPROM_Write+0x4a>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000114 	.word	0x20000114

08000674 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af02      	add	r7, sp, #8
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	461a      	mov	r2, r3
 800067e:	4603      	mov	r3, r0
 8000680:	81fb      	strh	r3, [r7, #14]
 8000682:	460b      	mov	r3, r1
 8000684:	81bb      	strh	r3, [r7, #12]
 8000686:	4613      	mov	r3, r2
 8000688:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800068a:	2306      	movs	r3, #6
 800068c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000692:	88fa      	ldrh	r2, [r7, #6]
 8000694:	89bb      	ldrh	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	2b00      	cmp	r3, #0
 800069a:	da00      	bge.n	800069e <EEPROM_Read+0x2a>
 800069c:	333f      	adds	r3, #63	; 0x3f
 800069e:	119b      	asrs	r3, r3, #6
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	4413      	add	r3, r2
 80006a6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80006a8:	8b7a      	ldrh	r2, [r7, #26]
 80006aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	e02e      	b.n	800071c <EEPROM_Read+0xa8>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80006be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80006d2:	89ba      	ldrh	r2, [r7, #12]
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff4f 	bl	800057c <bytestowrite>
 80006de:	4603      	mov	r3, r0
 80006e0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read_DMA(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
 80006e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	8af9      	ldrh	r1, [r7, #22]
 80006ea:	8aba      	ldrh	r2, [r7, #20]
 80006ec:	9201      	str	r2, [sp, #4]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	460a      	mov	r2, r1
 80006f4:	21a0      	movs	r1, #160	; 0xa0
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <EEPROM_Read+0xbc>)
 80006f8:	f002 fa1c 	bl	8002b34 <HAL_I2C_Mem_Read_DMA>
		startPage += 1;
 80006fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006fe:	3301      	adds	r3, #1
 8000700:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000702:	2300      	movs	r3, #0
 8000704:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	8abb      	ldrh	r3, [r7, #20]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800070e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000710:	8abb      	ldrh	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	3301      	adds	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
 800071c:	8b3b      	ldrh	r3, [r7, #24]
 800071e:	6a3a      	ldr	r2, [r7, #32]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbcc      	blt.n	80006be <EEPROM_Read+0x4a>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000114 	.word	0x20000114

08000734 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b098      	sub	sp, #96	; 0x60
 8000738:	af04      	add	r7, sp, #16
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 800073e:	2306      	movs	r3, #6
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2240      	movs	r2, #64	; 0x40
 8000754:	21ff      	movs	r1, #255	; 0xff
 8000756:	4618      	mov	r0, r3
 8000758:	f006 faca 	bl	8006cf0 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 800075c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000764:	9302      	str	r3, [sp, #8]
 8000766:	2340      	movs	r3, #64	; 0x40
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2302      	movs	r3, #2
 8000772:	21a0      	movs	r1, #160	; 0xa0
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <EEPROM_PageErase+0x54>)
 8000776:	f001 ff7f 	bl	8002678 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 800077a:	2005      	movs	r0, #5
 800077c:	f000 ff4a 	bl	8001614 <HAL_Delay>
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000114 	.word	0x20000114

0800078c <HAL_UARTEx_RxEventCallback>:
//	}
//
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffer, 100);
 8000798:	2264      	movs	r2, #100	; 0x64
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x48>)
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800079e:	f005 f87d 	bl	800589c <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_UARTEx_RxEventCallback+0x50>)
 80007a8:	701a      	strb	r2, [r3, #0]
    if (size == sizeof(receive_data))
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_UARTEx_RxEventCallback+0x50>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b2f      	cmp	r3, #47	; 0x2f
 80007b0:	d10b      	bne.n	80007ca <HAL_UARTEx_RxEventCallback+0x3e>
    {
    	strcpy(receive_data, buffer);
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x48>)
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x54>)
 80007b6:	f006 fb19 	bl	8006dec <strcpy>
    	dmaDataReceived = 1;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x58>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
    	n_cnt++;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007c8:	6013      	str	r3, [r2, #0]
    }
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000035c 	.word	0x2000035c
 80007d8:	20000228 	.word	0x20000228
 80007dc:	200003d0 	.word	0x200003d0
 80007e0:	2000032c 	.word	0x2000032c
 80007e4:	200003c4 	.word	0x200003c4
 80007e8:	200003c0 	.word	0x200003c0

080007ec <removeSpaces>:


void removeSpaces(char *str) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    int len = strlen(str);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fceb 	bl	80001d0 <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	60fb      	str	r3, [r7, #12]
    int i, j = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]

    for (i = 0; i < len; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e019      	b.n	800083c <removeSpaces+0x50>
        if (!isspace((unsigned char)str[i])) {
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <removeSpaces+0x6c>)
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10a      	bne.n	8000836 <removeSpaces+0x4a>
            str[j++] = str[i];
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	441a      	add	r2, r3
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	1c59      	adds	r1, r3, #1
 800082a:	6139      	str	r1, [r7, #16]
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	440b      	add	r3, r1
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbe1      	blt.n	8000808 <removeSpaces+0x1c>
        }
    }

    str[j] = '\0';  // Thêm ký tự null để kết thúc chuỗi
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	08007f20 	.word	0x08007f20

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fe65 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 fac5 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fbbd 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 800086e:	f000 fb83 	bl	8000f78 <MX_DMA_Init>
  MX_I2C1_Init();
 8000872:	f000 fb29 	bl	8000ec8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000876:	f000 fb55 	bl	8000f24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_DMA(&huart2,&buffer[0],sizeof(buffer));
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffer, 100);
 800087a:	2264      	movs	r2, #100	; 0x64
 800087c:	499e      	ldr	r1, [pc, #632]	; (8000af8 <main+0x29c>)
 800087e:	489f      	ldr	r0, [pc, #636]	; (8000afc <main+0x2a0>)
 8000880:	f005 f80c 	bl	800589c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000884:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <main+0x2a4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <main+0x2a4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 0208 	bic.w	r2, r2, #8
 8000892:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (dmaDataReceived==1)
 8000894:	4b9b      	ldr	r3, [pc, #620]	; (8000b04 <main+0x2a8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d1fb      	bne.n	8000894 <main+0x38>
	  {

	  sscanf(&receive_data[6], "%2x", &expected_size);
 800089c:	4a9a      	ldr	r2, [pc, #616]	; (8000b08 <main+0x2ac>)
 800089e:	499b      	ldr	r1, [pc, #620]	; (8000b0c <main+0x2b0>)
 80008a0:	489b      	ldr	r0, [pc, #620]	; (8000b10 <main+0x2b4>)
 80008a2:	f006 f9f7 	bl	8006c94 <siscanf>
	  char *end_ptr;
	  long int address = strtol(expected_size, &end_ptr, 16);
 80008a6:	4b98      	ldr	r3, [pc, #608]	; (8000b08 <main+0x2ac>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2210      	movs	r2, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	f006 f9c5 	bl	8006c40 <strtol>
 80008b6:	6178      	str	r0, [r7, #20]
	  if (strncmp((const char*)receive_data, "0A 55", 5) == 0)				//START BYTE
 80008b8:	2205      	movs	r2, #5
 80008ba:	4996      	ldr	r1, [pc, #600]	; (8000b14 <main+0x2b8>)
 80008bc:	4896      	ldr	r0, [pc, #600]	; (8000b18 <main+0x2bc>)
 80008be:	f006 fa2e 	bl	8006d1e <strncmp>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f040 8264 	bne.w	8000d92 <main+0x536>
	  {
		  data_size= strlen(receive_data);
 80008ca:	4893      	ldr	r0, [pc, #588]	; (8000b18 <main+0x2bc>)
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b91      	ldr	r3, [pc, #580]	; (8000b1c <main+0x2c0>)
 80008d6:	601a      	str	r2, [r3, #0]
		  cal_size = (data_size - 1 - 2 - 12 - (expected_size - 1))/2;
 80008d8:	4b90      	ldr	r3, [pc, #576]	; (8000b1c <main+0x2c0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1a3 020f 	sub.w	r2, r3, #15
 80008e0:	4b89      	ldr	r3, [pc, #548]	; (8000b08 <main+0x2ac>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	0fda      	lsrs	r2, r3, #31
 80008ea:	4413      	add	r3, r2
 80008ec:	105b      	asrs	r3, r3, #1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b8b      	ldr	r3, [pc, #556]	; (8000b20 <main+0x2c4>)
 80008f2:	601a      	str	r2, [r3, #0]
		  if (cal_size == expected_size)
 80008f4:	4b8a      	ldr	r3, [pc, #552]	; (8000b20 <main+0x2c4>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b83      	ldr	r3, [pc, #524]	; (8000b08 <main+0x2ac>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f040 8248 	bne.w	8000d92 <main+0x536>
		  {

		  if (strncmp((const char*)receive_data + 9, "01", 2) == 0)
 8000902:	4b88      	ldr	r3, [pc, #544]	; (8000b24 <main+0x2c8>)
 8000904:	2202      	movs	r2, #2
 8000906:	4988      	ldr	r1, [pc, #544]	; (8000b28 <main+0x2cc>)
 8000908:	4618      	mov	r0, r3
 800090a:	f006 fa08 	bl	8006d1e <strncmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d13e      	bne.n	8000992 <main+0x136>
			{
				  sscanf(&receive_data[12], "%2x", &byte_page1);			//01
 8000914:	4a85      	ldr	r2, [pc, #532]	; (8000b2c <main+0x2d0>)
 8000916:	497d      	ldr	r1, [pc, #500]	; (8000b0c <main+0x2b0>)
 8000918:	4885      	ldr	r0, [pc, #532]	; (8000b30 <main+0x2d4>)
 800091a:	f006 f9bb 	bl	8006c94 <siscanf>
				  sscanf(&receive_data[15], "%2x", &byte_page2);			//17h --> 23d
 800091e:	4a85      	ldr	r2, [pc, #532]	; (8000b34 <main+0x2d8>)
 8000920:	497a      	ldr	r1, [pc, #488]	; (8000b0c <main+0x2b0>)
 8000922:	4885      	ldr	r0, [pc, #532]	; (8000b38 <main+0x2dc>)
 8000924:	f006 f9b6 	bl	8006c94 <siscanf>
				  pagesum = (uint16_t)((byte_page1 << 8) | byte_page2);		//279
 8000928:	4b80      	ldr	r3, [pc, #512]	; (8000b2c <main+0x2d0>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <main+0x2d8>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21b      	sxth	r3, r3
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b7f      	ldr	r3, [pc, #508]	; (8000b3c <main+0x2e0>)
 800093e:	801a      	strh	r2, [r3, #0]
				  char *start_position = &receive_data[18];
 8000940:	4b7f      	ldr	r3, [pc, #508]	; (8000b40 <main+0x2e4>)
 8000942:	613b      	str	r3, [r7, #16]
				  EEPROM_PageErase(pagesum);
 8000944:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <main+0x2e0>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fef3 	bl	8000734 <EEPROM_PageErase>


				  char *end_position = strstr(start_position, "0D 0A");
 800094e:	497d      	ldr	r1, [pc, #500]	; (8000b44 <main+0x2e8>)
 8000950:	6938      	ldr	r0, [r7, #16]
 8000952:	f006 fa09 	bl	8006d68 <strstr>
 8000956:	60f8      	str	r0, [r7, #12]

				  if (end_position != NULL)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8219 	beq.w	8000d92 <main+0x536>
				  {

				      size_t length = end_position - start_position;
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	60bb      	str	r3, [r7, #8]
				      hexString[length];
				      strncpy(hexString, start_position, length);
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	6939      	ldr	r1, [r7, #16]
 800096c:	4876      	ldr	r0, [pc, #472]	; (8000b48 <main+0x2ec>)
 800096e:	f006 f9e8 	bl	8006d42 <strncpy>
				      removeSpaces(hexString);
 8000972:	4875      	ldr	r0, [pc, #468]	; (8000b48 <main+0x2ec>)
 8000974:	f7ff ff3a 	bl	80007ec <removeSpaces>
				      EEPROM_Write(pagesum, 0, hexString, strlen((char *)hexString));
 8000978:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <main+0x2e0>)
 800097a:	881c      	ldrh	r4, [r3, #0]
 800097c:	4872      	ldr	r0, [pc, #456]	; (8000b48 <main+0x2ec>)
 800097e:	f7ff fc27 	bl	80001d0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29b      	uxth	r3, r3
 8000986:	4a70      	ldr	r2, [pc, #448]	; (8000b48 <main+0x2ec>)
 8000988:	2100      	movs	r1, #0
 800098a:	4620      	mov	r0, r4
 800098c:	f7ff fe10 	bl	80005b0 <EEPROM_Write>
 8000990:	e1ff      	b.n	8000d92 <main+0x536>

				  }

			  }
		  else if (strncmp((const char*)receive_data + 9, "00", 2) == 0)
 8000992:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <main+0x2c8>)
 8000994:	2202      	movs	r2, #2
 8000996:	496d      	ldr	r1, [pc, #436]	; (8000b4c <main+0x2f0>)
 8000998:	4618      	mov	r0, r3
 800099a:	f006 f9c0 	bl	8006d1e <strncmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d141      	bne.n	8000a28 <main+0x1cc>
			  {

				  sscanf(&receive_data[12], "%s", &str1_w);
 80009a4:	4a6a      	ldr	r2, [pc, #424]	; (8000b50 <main+0x2f4>)
 80009a6:	496b      	ldr	r1, [pc, #428]	; (8000b54 <main+0x2f8>)
 80009a8:	4861      	ldr	r0, [pc, #388]	; (8000b30 <main+0x2d4>)
 80009aa:	f006 f973 	bl	8006c94 <siscanf>
				  sscanf(&receive_data[15], "%s", &str2_w);
 80009ae:	4a6a      	ldr	r2, [pc, #424]	; (8000b58 <main+0x2fc>)
 80009b0:	4968      	ldr	r1, [pc, #416]	; (8000b54 <main+0x2f8>)
 80009b2:	4861      	ldr	r0, [pc, #388]	; (8000b38 <main+0x2dc>)
 80009b4:	f006 f96e 	bl	8006c94 <siscanf>
				  strcpy(combinedstr, str1_w);
 80009b8:	4965      	ldr	r1, [pc, #404]	; (8000b50 <main+0x2f4>)
 80009ba:	4868      	ldr	r0, [pc, #416]	; (8000b5c <main+0x300>)
 80009bc:	f006 fa16 	bl	8006dec <strcpy>
				  strcat(combinedstr, str2_w);
 80009c0:	4965      	ldr	r1, [pc, #404]	; (8000b58 <main+0x2fc>)
 80009c2:	4866      	ldr	r0, [pc, #408]	; (8000b5c <main+0x300>)
 80009c4:	f006 f99c 	bl	8006d00 <strcat>
				  xxxx = (unsigned short)strtol(combinedstr, NULL, 16);
 80009c8:	2210      	movs	r2, #16
 80009ca:	2100      	movs	r1, #0
 80009cc:	4863      	ldr	r0, [pc, #396]	; (8000b5c <main+0x300>)
 80009ce:	f006 f937 	bl	8006c40 <strtol>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b62      	ldr	r3, [pc, #392]	; (8000b60 <main+0x304>)
 80009d8:	801a      	strh	r2, [r3, #0]
				  firstNumber = (xxxx) & 0x3F;
 80009da:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <main+0x304>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009e2:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <main+0x308>)
 80009e4:	6013      	str	r3, [r2, #0]
				  secondNumber = (xxxx & 0x7FC0)>>6;
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <main+0x304>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	119b      	asrs	r3, r3, #6
 80009ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009f0:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <main+0x30c>)
 80009f2:	6013      	str	r3, [r2, #0]
				  sscanf(&receive_data[18], "%s", &str3);
 80009f4:	4a5d      	ldr	r2, [pc, #372]	; (8000b6c <main+0x310>)
 80009f6:	4957      	ldr	r1, [pc, #348]	; (8000b54 <main+0x2f8>)
 80009f8:	4851      	ldr	r0, [pc, #324]	; (8000b40 <main+0x2e4>)
 80009fa:	f006 f94b 	bl	8006c94 <siscanf>
				  strcpy(hexString_byte, str3);
 80009fe:	495b      	ldr	r1, [pc, #364]	; (8000b6c <main+0x310>)
 8000a00:	485b      	ldr	r0, [pc, #364]	; (8000b70 <main+0x314>)
 8000a02:	f006 f9f3 	bl	8006dec <strcpy>
				  EEPROM_Write(secondNumber, firstNumber, hexString_byte, strlen((char *)hexString_byte));
 8000a06:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <main+0x30c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b29c      	uxth	r4, r3
 8000a0c:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <main+0x308>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b29d      	uxth	r5, r3
 8000a12:	4857      	ldr	r0, [pc, #348]	; (8000b70 <main+0x314>)
 8000a14:	f7ff fbdc 	bl	80001d0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <main+0x314>)
 8000a1e:	4629      	mov	r1, r5
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fdc5 	bl	80005b0 <EEPROM_Write>
 8000a26:	e1b4      	b.n	8000d92 <main+0x536>
			  }

		  else if (strncmp((const char*)receive_data + 9, "02", 2) == 0)		// current read
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <main+0x2c8>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4951      	ldr	r1, [pc, #324]	; (8000b74 <main+0x318>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 f975 	bl	8006d1e <strncmp>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8105 	bne.w	8000c46 <main+0x3ea>
			  {

				  sscanf(&receive_data[12], "%s", &str1_r);
 8000a3c:	4a4e      	ldr	r2, [pc, #312]	; (8000b78 <main+0x31c>)
 8000a3e:	4945      	ldr	r1, [pc, #276]	; (8000b54 <main+0x2f8>)
 8000a40:	483b      	ldr	r0, [pc, #236]	; (8000b30 <main+0x2d4>)
 8000a42:	f006 f927 	bl	8006c94 <siscanf>
				  sscanf(&receive_data[15], "%s", &str2_r);
 8000a46:	4a4d      	ldr	r2, [pc, #308]	; (8000b7c <main+0x320>)
 8000a48:	4942      	ldr	r1, [pc, #264]	; (8000b54 <main+0x2f8>)
 8000a4a:	483b      	ldr	r0, [pc, #236]	; (8000b38 <main+0x2dc>)
 8000a4c:	f006 f922 	bl	8006c94 <siscanf>
				  strcpy(combinedstr, str1_r);
 8000a50:	4949      	ldr	r1, [pc, #292]	; (8000b78 <main+0x31c>)
 8000a52:	4842      	ldr	r0, [pc, #264]	; (8000b5c <main+0x300>)
 8000a54:	f006 f9ca 	bl	8006dec <strcpy>
				  strcat(combinedstr, str2_r);
 8000a58:	4948      	ldr	r1, [pc, #288]	; (8000b7c <main+0x320>)
 8000a5a:	4840      	ldr	r0, [pc, #256]	; (8000b5c <main+0x300>)
 8000a5c:	f006 f950 	bl	8006d00 <strcat>
				  xxxx = (unsigned short)strtol(combinedstr, NULL, 16);
 8000a60:	2210      	movs	r2, #16
 8000a62:	2100      	movs	r1, #0
 8000a64:	483d      	ldr	r0, [pc, #244]	; (8000b5c <main+0x300>)
 8000a66:	f006 f8eb 	bl	8006c40 <strtol>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <main+0x304>)
 8000a70:	801a      	strh	r2, [r3, #0]

				  firstNumber = (xxxx) & 0x3F;
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <main+0x304>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7a:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <main+0x308>)
 8000a7c:	6013      	str	r3, [r2, #0]
				  secondNumber = (xxxx & 0x7FC0)>>6;
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <main+0x304>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	119b      	asrs	r3, r3, #6
 8000a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a88:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <main+0x30c>)
 8000a8a:	6013      	str	r3, [r2, #0]
				  EEPROM_Read(secondNumber, firstNumber, datar3, 2);
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <main+0x30c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b298      	uxth	r0, r3
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <main+0x308>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b299      	uxth	r1, r3
 8000a98:	2302      	movs	r3, #2
 8000a9a:	4a39      	ldr	r2, [pc, #228]	; (8000b80 <main+0x324>)
 8000a9c:	f7ff fdea 	bl	8000674 <EEPROM_Read>
				  sscanf(&receive_data[12], "%s", &str1_badd);
 8000aa0:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <main+0x328>)
 8000aa2:	492c      	ldr	r1, [pc, #176]	; (8000b54 <main+0x2f8>)
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <main+0x2d4>)
 8000aa6:	f006 f8f5 	bl	8006c94 <siscanf>
			      sscanf(&receive_data[15], "%s", &str2_badd);
 8000aaa:	4a37      	ldr	r2, [pc, #220]	; (8000b88 <main+0x32c>)
 8000aac:	4929      	ldr	r1, [pc, #164]	; (8000b54 <main+0x2f8>)
 8000aae:	4822      	ldr	r0, [pc, #136]	; (8000b38 <main+0x2dc>)
 8000ab0:	f006 f8f0 	bl	8006c94 <siscanf>

				  sprintf(combinedstr_badd, "%s%s", str1_badd, str2_badd);
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <main+0x32c>)
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <main+0x328>)
 8000ab8:	4934      	ldr	r1, [pc, #208]	; (8000b8c <main+0x330>)
 8000aba:	4835      	ldr	r0, [pc, #212]	; (8000b90 <main+0x334>)
 8000abc:	f006 f8ca 	bl	8006c54 <siprintf>
				  int index = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
				  for (int i = 0; i < strlen(str1_readbyte); i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ac8:	e00b      	b.n	8000ae2 <main+0x286>
				  {
					  result_b[index++] = str1_readbyte[i];
 8000aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000ad0:	4930      	ldr	r1, [pc, #192]	; (8000b94 <main+0x338>)
 8000ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ad4:	440a      	add	r2, r1
 8000ad6:	7811      	ldrb	r1, [r2, #0]
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <main+0x33c>)
 8000ada:	54d1      	strb	r1, [r2, r3]
				  for (int i = 0; i < strlen(str1_readbyte); i++)
 8000adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ade:	3301      	adds	r3, #1
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ae2:	482c      	ldr	r0, [pc, #176]	; (8000b94 <main+0x338>)
 8000ae4:	f7ff fb74 	bl	80001d0 <strlen>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8ec      	bhi.n	8000aca <main+0x26e>
				  }
				  for (int i = 0; i < strlen(combinedstr_badd); i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
 8000af4:	e05e      	b.n	8000bb4 <main+0x358>
 8000af6:	bf00      	nop
 8000af8:	2000035c 	.word	0x2000035c
 8000afc:	20000228 	.word	0x20000228
 8000b00:	2000026c 	.word	0x2000026c
 8000b04:	200003c4 	.word	0x200003c4
 8000b08:	200003c8 	.word	0x200003c8
 8000b0c:	08007ec4 	.word	0x08007ec4
 8000b10:	20000332 	.word	0x20000332
 8000b14:	08007ec8 	.word	0x08007ec8
 8000b18:	2000032c 	.word	0x2000032c
 8000b1c:	200003cc 	.word	0x200003cc
 8000b20:	200003d4 	.word	0x200003d4
 8000b24:	20000335 	.word	0x20000335
 8000b28:	08007ed0 	.word	0x08007ed0
 8000b2c:	20000452 	.word	0x20000452
 8000b30:	20000338 	.word	0x20000338
 8000b34:	20000454 	.word	0x20000454
 8000b38:	2000033b 	.word	0x2000033b
 8000b3c:	20000456 	.word	0x20000456
 8000b40:	2000033e 	.word	0x2000033e
 8000b44:	08007ed4 	.word	0x08007ed4
 8000b48:	20000464 	.word	0x20000464
 8000b4c:	08007edc 	.word	0x08007edc
 8000b50:	2000040c 	.word	0x2000040c
 8000b54:	08007ee0 	.word	0x08007ee0
 8000b58:	20000410 	.word	0x20000410
 8000b5c:	20000438 	.word	0x20000438
 8000b60:	20000458 	.word	0x20000458
 8000b64:	2000045c 	.word	0x2000045c
 8000b68:	20000460 	.word	0x20000460
 8000b6c:	2000041c 	.word	0x2000041c
 8000b70:	20000474 	.word	0x20000474
 8000b74:	08007ee4 	.word	0x08007ee4
 8000b78:	20000414 	.word	0x20000414
 8000b7c:	20000418 	.word	0x20000418
 8000b80:	20000450 	.word	0x20000450
 8000b84:	20000428 	.word	0x20000428
 8000b88:	2000042c 	.word	0x2000042c
 8000b8c:	08007ee8 	.word	0x08007ee8
 8000b90:	20000434 	.word	0x20000434
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200003f8 	.word	0x200003f8
					  result_b[index++] = combinedstr_badd[i];
 8000b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000ba2:	497e      	ldr	r1, [pc, #504]	; (8000d9c <main+0x540>)
 8000ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba6:	440a      	add	r2, r1
 8000ba8:	7811      	ldrb	r1, [r2, #0]
 8000baa:	4a7d      	ldr	r2, [pc, #500]	; (8000da0 <main+0x544>)
 8000bac:	54d1      	strb	r1, [r2, r3]
				  for (int i = 0; i < strlen(combinedstr_badd); i++) {
 8000bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bb4:	4879      	ldr	r0, [pc, #484]	; (8000d9c <main+0x540>)
 8000bb6:	f7ff fb0b 	bl	80001d0 <strlen>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d8ec      	bhi.n	8000b9c <main+0x340>
				  }
				  for (int i = 0; i < sizeof(datar3); i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000bc6:	e019      	b.n	8000bfc <main+0x3a0>
				  {
					  result_b[index++] = datar3[i];
 8000bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000bce:	4975      	ldr	r1, [pc, #468]	; (8000da4 <main+0x548>)
 8000bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bd2:	440a      	add	r2, r1
 8000bd4:	7811      	ldrb	r1, [r2, #0]
 8000bd6:	4a72      	ldr	r2, [pc, #456]	; (8000da0 <main+0x544>)
 8000bd8:	54d1      	strb	r1, [r2, r3]
					  if (datar3[i] == 255)
 8000bda:	4a72      	ldr	r2, [pc, #456]	; (8000da4 <main+0x548>)
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d104      	bne.n	8000bf0 <main+0x394>
					  {
						  datar3[i] = '0';
 8000be6:	4a6f      	ldr	r2, [pc, #444]	; (8000da4 <main+0x548>)
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	4413      	add	r3, r2
 8000bec:	2230      	movs	r2, #48	; 0x30
 8000bee:	701a      	strb	r2, [r3, #0]
					  }
					  HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 fd0f 	bl	8001614 <HAL_Delay>
				  for (int i = 0; i < sizeof(datar3); i++)
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8000bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d9e2      	bls.n	8000bc8 <main+0x36c>
				  }
				  for (int i = 0; i < strlen(str2_readbyte); i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c06:	e00b      	b.n	8000c20 <main+0x3c4>
					  result_b[index++] = str2_readbyte[i];
 8000c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000c0e:	4966      	ldr	r1, [pc, #408]	; (8000da8 <main+0x54c>)
 8000c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c12:	440a      	add	r2, r1
 8000c14:	7811      	ldrb	r1, [r2, #0]
 8000c16:	4a62      	ldr	r2, [pc, #392]	; (8000da0 <main+0x544>)
 8000c18:	54d1      	strb	r1, [r2, r3]
				  for (int i = 0; i < strlen(str2_readbyte); i++) {
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c20:	4861      	ldr	r0, [pc, #388]	; (8000da8 <main+0x54c>)
 8000c22:	f7ff fad5 	bl	80001d0 <strlen>
 8000c26:	4602      	mov	r2, r0
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d8ec      	bhi.n	8000c08 <main+0x3ac>
				  }
				  HAL_UART_Transmit_DMA(&huart2, result_b, sizeof(result_b));
 8000c2e:	2212      	movs	r2, #18
 8000c30:	495b      	ldr	r1, [pc, #364]	; (8000da0 <main+0x544>)
 8000c32:	485e      	ldr	r0, [pc, #376]	; (8000dac <main+0x550>)
 8000c34:	f004 fdb4 	bl	80057a0 <HAL_UART_Transmit_DMA>
				  HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fceb 	bl	8001614 <HAL_Delay>
				  dmaDataReceived=0;
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <main+0x554>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e0a5      	b.n	8000d92 <main+0x536>



			  }

			 else if (strncmp((const char*)receive_data + 9, "03", 2) == 0)		// sequential read
 8000c46:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <main+0x558>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	495b      	ldr	r1, [pc, #364]	; (8000db8 <main+0x55c>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f006 f866 	bl	8006d1e <strncmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 809c 	bne.w	8000d92 <main+0x536>
			  {
			 sscanf(&receive_data[12], "%2x", &byte_page1);			//01
 8000c5a:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <main+0x560>)
 8000c5c:	4958      	ldr	r1, [pc, #352]	; (8000dc0 <main+0x564>)
 8000c5e:	4859      	ldr	r0, [pc, #356]	; (8000dc4 <main+0x568>)
 8000c60:	f006 f818 	bl	8006c94 <siscanf>
				  sscanf(&receive_data[15], "%2x", &byte_page2);			//17h --> 23d
 8000c64:	4a58      	ldr	r2, [pc, #352]	; (8000dc8 <main+0x56c>)
 8000c66:	4956      	ldr	r1, [pc, #344]	; (8000dc0 <main+0x564>)
 8000c68:	4858      	ldr	r0, [pc, #352]	; (8000dcc <main+0x570>)
 8000c6a:	f006 f813 	bl	8006c94 <siscanf>
				  pagesum = (uint16_t)((byte_page1 << 8) | byte_page2);
 8000c6e:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <main+0x560>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <main+0x56c>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <main+0x574>)
 8000c84:	801a      	strh	r2, [r3, #0]
				  EEPROM_Read(pagesum, 0, datar2, 16);
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <main+0x574>)
 8000c88:	8818      	ldrh	r0, [r3, #0]
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <main+0x578>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f7ff fcf0 	bl	8000674 <EEPROM_Read>
				  sscanf(&receive_data[12], "%s", &str1_padd);
 8000c94:	4a50      	ldr	r2, [pc, #320]	; (8000dd8 <main+0x57c>)
 8000c96:	4951      	ldr	r1, [pc, #324]	; (8000ddc <main+0x580>)
 8000c98:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <main+0x568>)
 8000c9a:	f005 fffb 	bl	8006c94 <siscanf>
				  sscanf(&receive_data[15], "%s", &str2_padd);
 8000c9e:	4a50      	ldr	r2, [pc, #320]	; (8000de0 <main+0x584>)
 8000ca0:	494e      	ldr	r1, [pc, #312]	; (8000ddc <main+0x580>)
 8000ca2:	484a      	ldr	r0, [pc, #296]	; (8000dcc <main+0x570>)
 8000ca4:	f005 fff6 	bl	8006c94 <siscanf>

				  sprintf(combinedstr_add, "%s%s", str1_padd, str2_padd);
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <main+0x584>)
 8000caa:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <main+0x57c>)
 8000cac:	494d      	ldr	r1, [pc, #308]	; (8000de4 <main+0x588>)
 8000cae:	484e      	ldr	r0, [pc, #312]	; (8000de8 <main+0x58c>)
 8000cb0:	f005 ffd0 	bl	8006c54 <siprintf>


				    int index = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
				        for (int i = 0; i < strlen(str3_readbyte); i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbc:	e00b      	b.n	8000cd6 <main+0x47a>
				            result[index++] = str3_readbyte[i];
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8000cc4:	4949      	ldr	r1, [pc, #292]	; (8000dec <main+0x590>)
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc8:	440a      	add	r2, r1
 8000cca:	7811      	ldrb	r1, [r2, #0]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <main+0x594>)
 8000cce:	54d1      	strb	r1, [r2, r3]
				        for (int i = 0; i < strlen(str3_readbyte); i++) {
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	4845      	ldr	r0, [pc, #276]	; (8000dec <main+0x590>)
 8000cd8:	f7ff fa7a 	bl	80001d0 <strlen>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8ec      	bhi.n	8000cbe <main+0x462>
				        }
				        for (int i = 0; i < strlen(combinedstr_add); i++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e00b      	b.n	8000d02 <main+0x4a6>
				            result[index++] = combinedstr_add[i];
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8000cf0:	493d      	ldr	r1, [pc, #244]	; (8000de8 <main+0x58c>)
 8000cf2:	6a3a      	ldr	r2, [r7, #32]
 8000cf4:	440a      	add	r2, r1
 8000cf6:	7811      	ldrb	r1, [r2, #0]
 8000cf8:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <main+0x594>)
 8000cfa:	54d1      	strb	r1, [r2, r3]
				        for (int i = 0; i < strlen(combinedstr_add); i++) {
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	4839      	ldr	r0, [pc, #228]	; (8000de8 <main+0x58c>)
 8000d04:	f7ff fa64 	bl	80001d0 <strlen>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8ec      	bhi.n	8000cea <main+0x48e>
				        }
				        for (int i = 0; i < sizeof(datar2); i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	e019      	b.n	8000d4a <main+0x4ee>
				        	if (datar2[i] == 255)
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <main+0x578>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2bff      	cmp	r3, #255	; 0xff
 8000d20:	d104      	bne.n	8000d2c <main+0x4d0>
				        	{
				        		datar2[i] = '0';
 8000d22:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <main+0x578>)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	4413      	add	r3, r2
 8000d28:	2230      	movs	r2, #48	; 0x30
 8000d2a:	701a      	strb	r2, [r3, #0]

				        	}
				            result[index++] = datar2[i];
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d32:	4928      	ldr	r1, [pc, #160]	; (8000dd4 <main+0x578>)
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	440a      	add	r2, r1
 8000d38:	7811      	ldrb	r1, [r2, #0]
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <main+0x594>)
 8000d3c:	54d1      	strb	r1, [r2, r3]

				            HAL_Delay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f000 fc68 	bl	8001614 <HAL_Delay>
				        for (int i = 0; i < sizeof(datar2); i++) {
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d9e2      	bls.n	8000d16 <main+0x4ba>
				        }
				        for (int i = 0; i < strlen(str2_readbyte); i++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	e00b      	b.n	8000d6e <main+0x512>
				            result[index++] = str2_readbyte[i];
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d5c:	4912      	ldr	r1, [pc, #72]	; (8000da8 <main+0x54c>)
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	440a      	add	r2, r1
 8000d62:	7811      	ldrb	r1, [r2, #0]
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <main+0x594>)
 8000d66:	54d1      	strb	r1, [r2, r3]
				        for (int i = 0; i < strlen(str2_readbyte); i++) {
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <main+0x54c>)
 8000d70:	f7ff fa2e 	bl	80001d0 <strlen>
 8000d74:	4602      	mov	r2, r0
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8ec      	bhi.n	8000d56 <main+0x4fa>
				        }
				        HAL_UART_Transmit_DMA(&huart2, result, sizeof(result));
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	491c      	ldr	r1, [pc, #112]	; (8000df0 <main+0x594>)
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <main+0x550>)
 8000d82:	f004 fd0d 	bl	80057a0 <HAL_UART_Transmit_DMA>
				        HAL_Delay(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f000 fc44 	bl	8001614 <HAL_Delay>
				        dmaDataReceived=0;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <main+0x554>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
				    }
	  }
			  }

			  dmaDataReceived=0;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <main+0x554>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	  if (dmaDataReceived==1)
 8000d98:	e57c      	b.n	8000894 <main+0x38>
 8000d9a:	bf00      	nop
 8000d9c:	20000434 	.word	0x20000434
 8000da0:	200003f8 	.word	0x200003f8
 8000da4:	20000450 	.word	0x20000450
 8000da8:	20000068 	.word	0x20000068
 8000dac:	20000228 	.word	0x20000228
 8000db0:	200003c4 	.word	0x200003c4
 8000db4:	20000335 	.word	0x20000335
 8000db8:	08007ef0 	.word	0x08007ef0
 8000dbc:	20000452 	.word	0x20000452
 8000dc0:	08007ec4 	.word	0x08007ec4
 8000dc4:	20000338 	.word	0x20000338
 8000dc8:	20000454 	.word	0x20000454
 8000dcc:	2000033b 	.word	0x2000033b
 8000dd0:	20000456 	.word	0x20000456
 8000dd4:	20000440 	.word	0x20000440
 8000dd8:	20000420 	.word	0x20000420
 8000ddc:	08007ee0 	.word	0x08007ee0
 8000de0:	20000424 	.word	0x20000424
 8000de4:	08007ee8 	.word	0x08007ee8
 8000de8:	20000430 	.word	0x20000430
 8000dec:	20000034 	.word	0x20000034
 8000df0:	200003d8 	.word	0x200003d8

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 ff74 	bl	8006cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ffaa 	bl	8004dd4 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e86:	f000 f8e5 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fa0b 	bl	80052c4 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb4:	f000 f8ce 	bl	8001054 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <MX_I2C1_Init+0x54>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x58>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_I2C1_Init+0x50>)
 8000f06:	f001 fa73 	bl	80023f0 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f000 f8a0 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000114 	.word	0x20000114
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	00061a80 	.word	0x00061a80

08000f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <MX_USART2_UART_Init+0x50>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f004 fbd2 	bl	8005704 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f66:	f000 f875 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000228 	.word	0x20000228
 8000f74:	40004400 	.word	0x40004400

08000f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_DMA_Init+0x6c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <MX_DMA_Init+0x6c>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_DMA_Init+0x6c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f000 fc37 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f000 fc50 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f000 fc2f 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f000 fc48 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f000 fc27 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f000 fc40 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	202f      	movs	r0, #47	; 0x2f
 8000fd0:	f000 fc1f 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000fd4:	202f      	movs	r0, #47	; 0x2f
 8000fd6:	f000 fc38 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_GPIO_Init+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <MX_GPIO_Init+0x68>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_GPIO_Init+0x68>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_GPIO_Init+0x68>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <MX_GPIO_Init+0x68>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_GPIO_Init+0x68>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_GPIO_Init+0x68>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <MX_GPIO_Init+0x68>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_GPIO_Init+0x68>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_MspInit+0x4c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x4c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a4b      	ldr	r2, [pc, #300]	; (80011fc <HAL_I2C_MspInit+0x14c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f040 8090 	bne.w	80011f4 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	4b49      	ldr	r3, [pc, #292]	; (8001200 <HAL_I2C_MspInit+0x150>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a48      	ldr	r2, [pc, #288]	; (8001200 <HAL_I2C_MspInit+0x150>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_I2C_MspInit+0x150>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f0:	23c0      	movs	r3, #192	; 0xc0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f4:	2312      	movs	r3, #18
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001100:	2304      	movs	r3, #4
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	483e      	ldr	r0, [pc, #248]	; (8001204 <HAL_I2C_MspInit+0x154>)
 800110c:	f000 ffd4 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_I2C_MspInit+0x150>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a39      	ldr	r2, [pc, #228]	; (8001200 <HAL_I2C_MspInit+0x150>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_I2C_MspInit+0x150>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_I2C_MspInit+0x158>)
 800112e:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_I2C_MspInit+0x15c>)
 8001130:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001138:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_I2C_MspInit+0x158>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001146:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_I2C_MspInit+0x158>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <HAL_I2C_MspInit+0x158>)
 800116e:	f000 fb87 	bl	8001880 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001178:	f7ff ff6c 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_I2C_MspInit+0x158>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_I2C_MspInit+0x160>)
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <HAL_I2C_MspInit+0x164>)
 800118c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_I2C_MspInit+0x160>)
 8001190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001194:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_I2C_MspInit+0x160>)
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_I2C_MspInit+0x160>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80011c8:	4811      	ldr	r0, [pc, #68]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011ca:	f000 fb59 	bl	8001880 <HAL_DMA_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80011d4:	f7ff ff3e 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_I2C_MspInit+0x160>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	201f      	movs	r0, #31
 80011ea:	f000 fb12 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ee:	201f      	movs	r0, #31
 80011f0:	f000 fb2b 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40005400 	.word	0x40005400
 8001200:	40023800 	.word	0x40023800
 8001204:	40020400 	.word	0x40020400
 8001208:	20000168 	.word	0x20000168
 800120c:	40026010 	.word	0x40026010
 8001210:	200001c8 	.word	0x200001c8
 8001214:	400260b8 	.word	0x400260b8

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_UART_MspInit+0x14c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	f040 8090 	bne.w	800135c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_UART_MspInit+0x150>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_UART_MspInit+0x150>)
 8001246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_UART_MspInit+0x150>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_UART_MspInit+0x150>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a41      	ldr	r2, [pc, #260]	; (8001368 <HAL_UART_MspInit+0x150>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_UART_MspInit+0x150>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001274:	230c      	movs	r3, #12
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001284:	2307      	movs	r3, #7
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4837      	ldr	r0, [pc, #220]	; (800136c <HAL_UART_MspInit+0x154>)
 8001290:	f000 ff12 	bl	80020b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_UART_MspInit+0x158>)
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_UART_MspInit+0x15c>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800129a:	4b35      	ldr	r3, [pc, #212]	; (8001370 <HAL_UART_MspInit+0x158>)
 800129c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012d6:	f000 fad3 	bl	8001880 <HAL_DMA_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80012e0:	f7ff feb8 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_UART_MspInit+0x158>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_UART_MspInit+0x160>)
 80012f2:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_UART_MspInit+0x164>)
 80012f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_UART_MspInit+0x160>)
 80012f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x160>)
 800130c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001310:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_UART_MspInit+0x160>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_UART_MspInit+0x160>)
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001332:	f000 faa5 	bl	8001880 <HAL_DMA_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800133c:	f7ff fe8a 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_UART_MspInit+0x160>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2026      	movs	r0, #38	; 0x26
 8001352:	f000 fa5e 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001356:	2026      	movs	r0, #38	; 0x26
 8001358:	f000 fa77 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	2000026c 	.word	0x2000026c
 8001374:	40026088 	.word	0x40026088
 8001378:	200002cc 	.word	0x200002cc
 800137c:	400260a0 	.word	0x400260a0

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f902 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Stream0_IRQHandler+0x10>)
 80013da:	f000 fbe9 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000168 	.word	0x20000168

080013e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Stream5_IRQHandler+0x10>)
 80013ee:	f000 fbdf 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000026c 	.word	0x2000026c

080013fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA1_Stream6_IRQHandler+0x10>)
 8001402:	f000 fbd5 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002cc 	.word	0x200002cc

08001410 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <I2C1_EV_IRQHandler+0x10>)
 8001416:	f001 fd21 	bl	8002e5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000114 	.word	0x20000114

08001424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <USART2_IRQHandler+0x10>)
 800142a:	f004 fa9d 	bl	8005968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000228 	.word	0x20000228

08001438 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Stream7_IRQHandler+0x10>)
 800143e:	f000 fbb7 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001c8 	.word	0x200001c8

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f005 fc8a 	bl	8006d94 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000484 	.word	0x20000484
 80014b4:	200005d8 	.word	0x200005d8

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd7 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f005 fc49 	bl	8006da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f9a5 	bl	800085c <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001520:	08008080 	.word	0x08008080
  ldr r2, =_sbss
 8001524:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001528:	200005d4 	.word	0x200005d4

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f94f 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fd7c 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f967 	bl	8001866 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f92f 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	200000a4 	.word	0x200000a4
 80015d0:	200000a0 	.word	0x200000a0

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200000a4 	.word	0x200000a4
 80015f8:	20000488 	.word	0x20000488

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000488 	.word	0x20000488

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000a4 	.word	0x200000a4

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff feb6 	bl	80015fc <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e099      	b.n	80019d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018bc:	e00f      	b.n	80018de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018be:	f7ff fe9d 	bl	80015fc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d908      	bls.n	80018de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e078      	b.n	80019d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e8      	bne.n	80018be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_DMA_Init+0x158>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2b04      	cmp	r3, #4
 8001936:	d107      	bne.n	8001948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4313      	orrs	r3, r2
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2b04      	cmp	r3, #4
 8001970:	d117      	bne.n	80019a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fb1b 	bl	8001fc0 <DMA_CheckFifoParam>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800199e:	2301      	movs	r3, #1
 80019a0:	e016      	b.n	80019d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fad2 	bl	8001f54 <DMA_CalcBaseAndBitshift>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	223f      	movs	r2, #63	; 0x3f
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	f010803f 	.word	0xf010803f

080019dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Start_IT+0x26>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e040      	b.n	8001a84 <HAL_DMA_Start_IT+0xa8>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d12f      	bne.n	8001a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa64 	bl	8001ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	223f      	movs	r2, #63	; 0x3f
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0216 	orr.w	r2, r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e005      	b.n	8001a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a9a:	f7ff fdaf 	bl	80015fc <HAL_GetTick>
 8001a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d008      	beq.n	8001abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e052      	b.n	8001b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0216 	bic.w	r2, r2, #22
 8001acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_DMA_Abort+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0208 	bic.w	r2, r2, #8
 8001afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0e:	e013      	b.n	8001b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b10:	f7ff fd74 	bl	80015fc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d90c      	bls.n	8001b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2203      	movs	r2, #3
 8001b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e015      	b.n	8001b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e4      	bne.n	8001b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	223f      	movs	r2, #63	; 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00c      	b.n	8001ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <HAL_DMA_IRQHandler+0x248>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a8e      	ldr	r2, [pc, #568]	; (8001dfc <HAL_DMA_IRQHandler+0x24c>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2208      	movs	r2, #8
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	2208      	movs	r2, #8
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2204      	movs	r2, #4
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2204      	movs	r2, #4
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d043      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2210      	movs	r2, #16
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
 8001cde:	e01f      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e016      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0208 	bic.w	r2, r2, #8
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2220      	movs	r2, #32
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 808f 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8087 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2220      	movs	r2, #32
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d136      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x1da>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	223f      	movs	r2, #63	; 0x3f
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d07e      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
        }
        return;
 8001dc6:	e079      	b.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d031      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e02c      	b.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
 8001df6:	bf00      	nop
 8001df8:	2000009c 	.word	0x2000009c
 8001dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
 8001e10:	e01e      	b.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10f      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0210 	bic.w	r2, r2, #16
 8001e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d032      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d307      	bcc.n	8001e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f2      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x2cc>
 8001e96:	e000      	b.n	8001e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ebc:	bf00      	nop
    }
  }
}
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d108      	bne.n	8001f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f36:	e007      	b.n	8001f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b10      	subs	r3, #16
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <DMA_CalcBaseAndBitshift+0x68>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d909      	bls.n	8001f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	e007      	b.n	8001fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	aaaaaaab 	.word	0xaaaaaaab
 8001fbc:	08007f18 	.word	0x08007f18

08001fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11f      	bne.n	800201a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d856      	bhi.n	800208e <DMA_CheckFifoParam+0xce>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x28>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	0800200b 	.word	0x0800200b
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	0800208f 	.word	0x0800208f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d046      	beq.n	8002092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e043      	b.n	8002092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002012:	d140      	bne.n	8002096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e03d      	b.n	8002096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d121      	bne.n	8002068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d837      	bhi.n	800209a <DMA_CheckFifoParam+0xda>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <DMA_CheckFifoParam+0x70>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002047 	.word	0x08002047
 8002038:	08002041 	.word	0x08002041
 800203c:	08002059 	.word	0x08002059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e030      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d025      	beq.n	800209e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002056:	e022      	b.n	800209e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002066:	e01c      	b.n	80020a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d903      	bls.n	8002076 <DMA_CheckFifoParam+0xb6>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002074:	e018      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
      break;
 800207a:	e015      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      break;
 800208c:	e00b      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 800208e:	bf00      	nop
 8002090:	e00a      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e008      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e006      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e004      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e002      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
    }
  } 
  
  return status; 
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e16b      	b.n	80023ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 815a 	bne.w	80023a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b03      	cmp	r3, #3
 8002176:	d017      	beq.n	80021a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80b4 	beq.w	80023a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a5f      	ldr	r2, [pc, #380]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a5b      	ldr	r2, [pc, #364]	; (80023c8 <HAL_GPIO_Init+0x310>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x314>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02b      	beq.n	80022de <HAL_GPIO_Init+0x226>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_GPIO_Init+0x318>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x222>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_GPIO_Init+0x31c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x21e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x21a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_GPIO_Init+0x324>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x216>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4d      	ldr	r2, [pc, #308]	; (80023e0 <HAL_GPIO_Init+0x328>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x212>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4c      	ldr	r2, [pc, #304]	; (80023e4 <HAL_GPIO_Init+0x32c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x20e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <HAL_GPIO_Init+0x330>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x20a>
 80022be:	2307      	movs	r3, #7
 80022c0:	e00e      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022c2:	2308      	movs	r3, #8
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x228>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f0:	4935      	ldr	r1, [pc, #212]	; (80023c8 <HAL_GPIO_Init+0x310>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002322:	4a32      	ldr	r2, [pc, #200]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_GPIO_Init+0x334>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800234c:	4a27      	ldr	r2, [pc, #156]	; (80023ec <HAL_GPIO_Init+0x334>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002376:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_GPIO_Init+0x334>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a12      	ldr	r2, [pc, #72]	; (80023ec <HAL_GPIO_Init+0x334>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae90 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40021c00 	.word	0x40021c00
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e12b      	b.n	800265a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fe4a 	bl	80010b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	; 0x24
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002454:	f003 f92e 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a81      	ldr	r2, [pc, #516]	; (8002664 <HAL_I2C_Init+0x274>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d807      	bhi.n	8002474 <HAL_I2C_Init+0x84>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a80      	ldr	r2, [pc, #512]	; (8002668 <HAL_I2C_Init+0x278>)
 8002468:	4293      	cmp	r3, r2
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e006      	b.n	8002482 <HAL_I2C_Init+0x92>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a7d      	ldr	r2, [pc, #500]	; (800266c <HAL_I2C_Init+0x27c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0e7      	b.n	800265a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4a78      	ldr	r2, [pc, #480]	; (8002670 <HAL_I2C_Init+0x280>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a6a      	ldr	r2, [pc, #424]	; (8002664 <HAL_I2C_Init+0x274>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d802      	bhi.n	80024c4 <HAL_I2C_Init+0xd4>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	e009      	b.n	80024d8 <HAL_I2C_Init+0xe8>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	4a69      	ldr	r2, [pc, #420]	; (8002674 <HAL_I2C_Init+0x284>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	3301      	adds	r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	495c      	ldr	r1, [pc, #368]	; (8002664 <HAL_I2C_Init+0x274>)
 80024f4:	428b      	cmp	r3, r1
 80024f6:	d819      	bhi.n	800252c <HAL_I2C_Init+0x13c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e59      	subs	r1, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fbb1 f3f3 	udiv	r3, r1, r3
 8002506:	1c59      	adds	r1, r3, #1
 8002508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800250c:	400b      	ands	r3, r1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_I2C_Init+0x138>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1e59      	subs	r1, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	e051      	b.n	80025cc <HAL_I2C_Init+0x1dc>
 8002528:	2304      	movs	r3, #4
 800252a:	e04f      	b.n	80025cc <HAL_I2C_Init+0x1dc>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <HAL_I2C_Init+0x168>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e012      	b.n	800257e <HAL_I2C_Init+0x18e>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Init+0x196>
 8002582:	2301      	movs	r3, #1
 8002584:	e022      	b.n	80025cc <HAL_I2C_Init+0x1dc>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <HAL_I2C_Init+0x1bc>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e58      	subs	r0, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	440b      	add	r3, r1
 800259c:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Init+0x1dc>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	6809      	ldr	r1, [r1, #0]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6911      	ldr	r1, [r2, #16]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	000186a0 	.word	0x000186a0
 8002668:	001e847f 	.word	0x001e847f
 800266c:	003d08ff 	.word	0x003d08ff
 8002670:	431bde83 	.word	0x431bde83
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002692:	f7fe ffb3 	bl	80015fc <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	f040 80d9 	bne.w	8002858 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2319      	movs	r3, #25
 80026ac:	2201      	movs	r2, #1
 80026ae:	496d      	ldr	r1, [pc, #436]	; (8002864 <HAL_I2C_Mem_Write+0x1ec>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f002 f9bb 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	e0cc      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Mem_Write+0x56>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0c5      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d007      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_I2C_Mem_Write+0x1f0>)
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	8979      	ldrh	r1, [r7, #10]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4603      	mov	r3, r0
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f001 fe38 	bl	80043bc <I2C_RequestMemoryWrite>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d052      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e081      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f002 fa3c 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d11b      	bne.n	80027f8 <HAL_I2C_Mem_Write+0x180>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1aa      	bne.n	8002756 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f002 fa28 	bl	8004c5a <I2C_WaitOnBTFFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e016      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000

0800286c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800288a:	f7fe feb7 	bl	80015fc <HAL_GetTick>
 800288e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	f040 8145 	bne.w	8002b28 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800289e:	4b9d      	ldr	r3, [pc, #628]	; (8002b14 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	08db      	lsrs	r3, r3, #3
 80028a4:	4a9c      	ldr	r2, [pc, #624]	; (8002b18 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a1a      	lsrs	r2, r3, #8
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d116      	bne.n	80028f2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e11b      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d0db      	beq.n	80028b8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_I2C_Mem_Write_DMA+0xa2>
 800290a:	2302      	movs	r3, #2
 800290c:	e10d      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d007      	beq.n	8002934 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2221      	movs	r2, #33	; 0x21
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002976:	897a      	ldrh	r2, [r7, #10]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80a9 	beq.w	8002aea <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02a      	beq.n	80029f6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	4a5d      	ldr	r2, [pc, #372]	; (8002b24 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	2200      	movs	r2, #0
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	2200      	movs	r2, #0
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	2200      	movs	r2, #0
 80029c6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2200      	movs	r2, #0
 80029ce:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3310      	adds	r3, #16
 80029e0:	461a      	mov	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	f7fe fff9 	bl	80019dc <HAL_DMA_Start_IT>
 80029ea:	4603      	mov	r3, r0
 80029ec:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80029ee:	7efb      	ldrb	r3, [r7, #27]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d166      	bne.n	8002ac2 <HAL_I2C_Mem_Write_DMA+0x256>
 80029f4:	e013      	b.n	8002a1e <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e085      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002a1e:	88f8      	ldrh	r0, [r7, #6]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	2323      	movs	r3, #35	; 0x23
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 fcc4 	bl	80043bc <I2C_RequestMemoryWrite>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d022      	beq.n	8002a80 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f894 	bl	8001b6c <HAL_DMA_Abort_IT>
 8002a44:	4603      	mov	r3, r0
 8002a46:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e054      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e033      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e01f      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00b      	b.n	8002b2a <HAL_I2C_Mem_Write_DMA+0x2be>
 8002b12:	bf00      	nop
 8002b14:	2000009c 	.word	0x2000009c
 8002b18:	14f8b589 	.word	0x14f8b589
 8002b1c:	ffff0000 	.word	0xffff0000
 8002b20:	080046b9 	.word	0x080046b9
 8002b24:	08004863 	.word	0x08004863
    }
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7fe fd55 	bl	80015fc <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	f040 8176 	bne.w	8002e52 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b66:	4b95      	ldr	r3, [pc, #596]	; (8002dbc <HAL_I2C_Mem_Read_DMA+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	4a94      	ldr	r2, [pc, #592]	; (8002dc0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a1a      	lsrs	r2, r3, #8
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e14c      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d0db      	beq.n	8002b80 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e13e      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d007      	beq.n	8002bfc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2222      	movs	r2, #34	; 0x22
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a62      	ldr	r2, [pc, #392]	; (8002dc4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002c3e:	897a      	ldrh	r2, [r7, #10]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002c44:	893a      	ldrh	r2, [r7, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80cc 	beq.w	8002df8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02d      	beq.n	8002cc4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	4a56      	ldr	r2, [pc, #344]	; (8002dc8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	4a55      	ldr	r2, [pc, #340]	; (8002dcc <HAL_I2C_Mem_Read_DMA+0x298>)
 8002c76:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2200      	movs	r2, #0
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	f7fe fe95 	bl	80019dc <HAL_DMA_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 8087 	bne.w	8002dd0 <HAL_I2C_Mem_Read_DMA+0x29c>
 8002cc2:	e013      	b.n	8002cec <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b3      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002cec:	88f8      	ldrh	r0, [r7, #6]
 8002cee:	893a      	ldrh	r2, [r7, #8]
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2323      	movs	r3, #35	; 0x23
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f001 fbf3 	bl	80044e8 <I2C_RequestMemoryRead>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe ff2d 	bl	8001b6c <HAL_DMA_Abort_IT>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e081      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e007      	b.n	8002d7a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	e049      	b.n	8002e4e <HAL_I2C_Mem_Read_DMA+0x31a>
 8002dba:	bf00      	nop
 8002dbc:	2000009c 	.word	0x2000009c
 8002dc0:	14f8b589 	.word	0x14f8b589
 8002dc4:	ffff0000 	.word	0xffff0000
 8002dc8:	080046b9 	.word	0x080046b9
 8002dcc:	08004863 	.word	0x08004863
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e02d      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002df8:	88f8      	ldrh	r0, [r7, #6]
 8002dfa:	893a      	ldrh	r2, [r7, #8]
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2323      	movs	r3, #35	; 0x23
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4603      	mov	r3, r0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f001 fb6d 	bl	80044e8 <I2C_RequestMemoryRead>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e01d      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	; 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d003      	beq.n	8002e94 <HAL_I2C_EV_IRQHandler+0x38>
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	f040 80b1 	bne.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_I2C_EV_IRQHandler+0x6e>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002eb4:	d003      	beq.n	8002ebe <HAL_I2C_EV_IRQHandler+0x62>
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x66>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x68>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f000 8114 	beq.w	80030f2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x90>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f001 ff5d 	bl	8004d9e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fcbf 	bl	8003868 <I2C_Master_SB>
 8002eea:	e083      	b.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0xac>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fd37 	bl	8003974 <I2C_Master_ADD10>
 8002f06:	e075      	b.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0xc8>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fd53 	bl	80039c8 <I2C_Master_ADDR>
 8002f22:	e067      	b.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d036      	beq.n	8002f9c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3c:	f000 80db 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x10a>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x10a>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f937 	bl	80031d2 <I2C_MasterTransmit_TXE>
 8002f64:	e046      	b.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80c2 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80bc 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f7e:	7bbb      	ldrb	r3, [r7, #14]
 8002f80:	2b21      	cmp	r3, #33	; 0x21
 8002f82:	d103      	bne.n	8002f8c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f9c0 	bl	800330a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8a:	e0b4      	b.n	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	f040 80b1 	bne.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa2e 	bl	80033f6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9a:	e0ac      	b.n	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002faa:	f000 80a4 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0x178>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0x178>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 faa6 	bl	800351e <I2C_MasterReceive_RXNE>
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 808b 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8085 	beq.w	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fb51 	bl	8003694 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff2:	e080      	b.n	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002ff4:	e07f      	b.n	80030f6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e007      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d011      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 ff11 	bl	8003e66 <I2C_Slave_ADDR>
 8003044:	e05a      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x206>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 ff4c 	bl	8003ef8 <I2C_Slave_STOPF>
 8003060:	e04c      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003062:	7bbb      	ldrb	r3, [r7, #14]
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d002      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0x212>
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	2b29      	cmp	r3, #41	; 0x29
 800306c:	d120      	bne.n	80030b0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x238>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x238>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fe2c 	bl	8003cea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003092:	e032      	b.n	80030fa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02d      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x29e>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d028      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe5b 	bl	8003d64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ae:	e024      	b.n	80030fa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fe69 	bl	8003da6 <I2C_SlaveReceive_RXNE>
 80030d4:	e012      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fe99 	bl	8003e22 <I2C_SlaveReceive_BTF>
 80030f0:	e004      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	70fb      	strb	r3, [r7, #3]
 800315e:	4613      	mov	r3, r2
 8003160:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d150      	bne.n	800329a <I2C_MasterTransmit_TXE+0xc8>
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b21      	cmp	r3, #33	; 0x21
 80031fc:	d14d      	bne.n	800329a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d01d      	beq.n	8003240 <I2C_MasterTransmit_TXE+0x6e>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b20      	cmp	r3, #32
 8003208:	d01a      	beq.n	8003240 <I2C_MasterTransmit_TXE+0x6e>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003210:	d016      	beq.n	8003240 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003220:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2211      	movs	r2, #17
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff62 	bl	8003102 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800323e:	e060      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800324e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d107      	bne.n	800328a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ff7d 	bl	8003182 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003288:	e03b      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff35 	bl	8003102 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003298:	e033      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b21      	cmp	r3, #33	; 0x21
 800329e:	d005      	beq.n	80032ac <I2C_MasterTransmit_TXE+0xda>
 80032a0:	7bbb      	ldrb	r3, [r7, #14]
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d12d      	bne.n	8003302 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b22      	cmp	r3, #34	; 0x22
 80032aa:	d12a      	bne.n	8003302 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032c6:	e01c      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d103      	bne.n	80032dc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f88e 	bl	80033f6 <I2C_MemoryTransmit_TXE_BTF>
}
 80032da:	e012      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003300:	e7ff      	b.n	8003302 <I2C_MasterTransmit_TXE+0x130>
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b21      	cmp	r3, #33	; 0x21
 8003322:	d164      	bne.n	80033ee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003352:	e04c      	b.n	80033ee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d01d      	beq.n	8003396 <I2C_MasterTransmit_BTF+0x8c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b20      	cmp	r3, #32
 800335e:	d01a      	beq.n	8003396 <I2C_MasterTransmit_BTF+0x8c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003366:	d016      	beq.n	8003396 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003376:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2211      	movs	r2, #17
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff feb7 	bl	8003102 <HAL_I2C_MasterTxCpltCallback>
}
 8003394:	e02b      	b.n	80033ee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d107      	bne.n	80033e0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fed2 	bl	8003182 <HAL_I2C_MemTxCpltCallback>
}
 80033de:	e006      	b.n	80033ee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fe8a 	bl	8003102 <HAL_I2C_MasterTxCpltCallback>
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11d      	bne.n	800344a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10b      	bne.n	800342e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800342c:	e073      	b.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	b29b      	uxth	r3, r3
 8003434:	121b      	asrs	r3, r3, #8
 8003436:	b2da      	uxtb	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003448:	e065      	b.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10b      	bne.n	800346a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	b2da      	uxtb	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003468:	e055      	b.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b02      	cmp	r3, #2
 8003470:	d151      	bne.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b22      	cmp	r3, #34	; 0x22
 8003476:	d10d      	bne.n	8003494 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003486:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003492:	e040      	b.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d015      	beq.n	80034ca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d112      	bne.n	80034ca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034c8:	e025      	b.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d120      	bne.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b21      	cmp	r3, #33	; 0x21
 80034d8:	d11d      	bne.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fe36 	bl	8003182 <HAL_I2C_MemTxCpltCallback>
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b22      	cmp	r3, #34	; 0x22
 8003530:	f040 80ac 	bne.w	800368c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d921      	bls.n	8003586 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b03      	cmp	r3, #3
 8003570:	f040 808c 	bne.w	800368c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003584:	e082      	b.n	800368c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	2b02      	cmp	r3, #2
 800358c:	d075      	beq.n	800367a <I2C_MasterReceive_RXNE+0x15c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d002      	beq.n	800359a <I2C_MasterReceive_RXNE+0x7c>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d16f      	bne.n	800367a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f001 fb9e 	bl	8004cdc <I2C_WaitOnSTOPRequestThroughIT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d142      	bne.n	800362c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d10a      	bne.n	8003616 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fdc1 	bl	8003196 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003614:	e03a      	b.n	800368c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2212      	movs	r2, #18
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fd76 	bl	8003116 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800362a:	e02f      	b.n	800368c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800363a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fd99 	bl	80031aa <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003678:	e008      	b.n	800368c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003688:	605a      	str	r2, [r3, #4]
}
 800368a:	e7ff      	b.n	800368c <I2C_MasterReceive_RXNE+0x16e>
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036e2:	e0bd      	b.n	8003860 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d129      	bne.n	8003742 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d00a      	beq.n	800371a <I2C_MasterReceive_BTF+0x86>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d007      	beq.n	800371a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003740:	e08e      	b.n	8003860 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d176      	bne.n	800383a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d002      	beq.n	8003758 <I2C_MasterReceive_BTF+0xc4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d108      	bne.n	800376a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e019      	b.n	800379e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d002      	beq.n	8003776 <I2C_MasterReceive_BTF+0xe2>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d108      	bne.n	8003788 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00a      	b.n	800379e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b10      	cmp	r3, #16
 800378c:	d007      	beq.n	800379e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d10a      	bne.n	8003824 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fcba 	bl	8003196 <HAL_I2C_MemRxCpltCallback>
}
 8003822:	e01d      	b.n	8003860 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2212      	movs	r2, #18
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fc6f 	bl	8003116 <HAL_I2C_MasterRxCpltCallback>
}
 8003838:	e012      	b.n	8003860 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d117      	bne.n	80038ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003894:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003896:	e067      	b.n	8003968 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]
}
 80038aa:	e05d      	b.n	8003968 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b4:	d133      	bne.n	800391e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b21      	cmp	r3, #33	; 0x21
 80038c0:	d109      	bne.n	80038d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	e008      	b.n	80038e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <I2C_Master_SB+0x92>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d032      	beq.n	8003968 <I2C_Master_SB+0x100>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02d      	beq.n	8003968 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391a:	605a      	str	r2, [r3, #4]
}
 800391c:	e024      	b.n	8003968 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	b29b      	uxth	r3, r3
 800392c:	11db      	asrs	r3, r3, #7
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0306 	and.w	r3, r3, #6
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f063 030f 	orn	r3, r3, #15
 800393a:	b2da      	uxtb	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]
}
 8003942:	e011      	b.n	8003968 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10d      	bne.n	8003968 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	b29b      	uxth	r3, r3
 8003952:	11db      	asrs	r3, r3, #7
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0306 	and.w	r3, r3, #6
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f063 030e 	orn	r3, r3, #14
 8003960:	b2da      	uxtb	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	b2da      	uxtb	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <I2C_Master_ADD10+0x26>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <I2C_Master_ADD10+0x48>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ba:	605a      	str	r2, [r3, #4]
  }
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b091      	sub	sp, #68	; 0x44
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b22      	cmp	r3, #34	; 0x22
 80039f0:	f040 8169 	bne.w	8003cc6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <I2C_Master_ADDR+0x54>
 80039fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d10b      	bne.n	8003a1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a04:	2300      	movs	r3, #0
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	e160      	b.n	8003cde <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11d      	bne.n	8003a60 <I2C_Master_ADDR+0x98>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a2c:	d118      	bne.n	8003a60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a5e:	e13e      	b.n	8003cde <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d113      	bne.n	8003a92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e115      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 808a 	bne.w	8003bb2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa4:	d137      	bne.n	8003b16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d113      	bne.n	8003aee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	e0e7      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e0d3      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d02e      	beq.n	8003b7a <I2C_Master_ADDR+0x1b2>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d02b      	beq.n	8003b7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	2b12      	cmp	r3, #18
 8003b26:	d102      	bne.n	8003b2e <I2C_Master_ADDR+0x166>
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d125      	bne.n	8003b7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d00e      	beq.n	8003b52 <I2C_Master_ADDR+0x18a>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d00b      	beq.n	8003b52 <I2C_Master_ADDR+0x18a>
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d008      	beq.n	8003b52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e007      	b.n	8003b62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	e0a1      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e085      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d14d      	bne.n	8003c58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d016      	beq.n	8003bf0 <I2C_Master_ADDR+0x228>
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d013      	beq.n	8003bf0 <I2C_Master_ADDR+0x228>
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d010      	beq.n	8003bf0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e007      	b.n	8003c00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d117      	bne.n	8003c40 <I2C_Master_ADDR+0x278>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c16:	d00b      	beq.n	8003c30 <I2C_Master_ADDR+0x268>
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d008      	beq.n	8003c30 <I2C_Master_ADDR+0x268>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d005      	beq.n	8003c30 <I2C_Master_ADDR+0x268>
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d002      	beq.n	8003c30 <I2C_Master_ADDR+0x268>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d107      	bne.n	8003c40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	e032      	b.n	8003cbe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c76:	d117      	bne.n	8003ca8 <I2C_Master_ADDR+0x2e0>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c7e:	d00b      	beq.n	8003c98 <I2C_Master_ADDR+0x2d0>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d008      	beq.n	8003c98 <I2C_Master_ADDR+0x2d0>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <I2C_Master_ADDR+0x2d0>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d002      	beq.n	8003c98 <I2C_Master_ADDR+0x2d0>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d107      	bne.n	8003ca8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ca6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003cc4:	e00b      	b.n	8003cde <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	e7ff      	b.n	8003cde <I2C_Master_ADDR+0x316>
 8003cde:	bf00      	nop
 8003ce0:	3744      	adds	r7, #68	; 0x44
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d02b      	beq.n	8003d5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d114      	bne.n	8003d5c <I2C_SlaveTransmit_TXE+0x72>
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b29      	cmp	r3, #41	; 0x29
 8003d36:	d111      	bne.n	8003d5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2221      	movs	r2, #33	; 0x21
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2228      	movs	r2, #40	; 0x28
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff f9e7 	bl	800312a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d011      	beq.n	8003d9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d02c      	beq.n	8003e1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d114      	bne.n	8003e1a <I2C_SlaveReceive_RXNE+0x74>
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b2a      	cmp	r3, #42	; 0x2a
 8003df4:	d111      	bne.n	8003e1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2222      	movs	r2, #34	; 0x22
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2228      	movs	r2, #40	; 0x28
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff f992 	bl	800313e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d125      	bne.n	8003ed0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	81bb      	strh	r3, [r7, #12]
 8003eb2:	e002      	b.n	8003eba <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ec2:	89ba      	ldrh	r2, [r7, #12]
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff f942 	bl	8003152 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ece:	e00e      	b.n	8003eee <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d172      	bne.n	800403c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b22      	cmp	r3, #34	; 0x22
 8003f5a:	d002      	beq.n	8003f62 <I2C_Slave_STOPF+0x6a>
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d135      	bne.n	8003fce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd ff92 	bl	8001ec4 <HAL_DMA_GetState>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d049      	beq.n	800403a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	4a69      	ldr	r2, [pc, #420]	; (8004150 <I2C_Slave_STOPF+0x258>)
 8003fac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fdda 	bl	8001b6c <HAL_DMA_Abort_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d03d      	beq.n	800403a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fcc:	e035      	b.n	800403a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0204 	orr.w	r2, r3, #4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004000:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd ff5c 	bl	8001ec4 <HAL_DMA_GetState>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d014      	beq.n	800403c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	4a4e      	ldr	r2, [pc, #312]	; (8004150 <I2C_Slave_STOPF+0x258>)
 8004018:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fda4 	bl	8001b6c <HAL_DMA_Abort_IT>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004034:	4610      	mov	r0, r2
 8004036:	4798      	blx	r3
 8004038:	e000      	b.n	800403c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800403a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03e      	beq.n	80040c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d112      	bne.n	800407a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d112      	bne.n	80040ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f843 	bl	8004158 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040d2:	e039      	b.n	8004148 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b2a      	cmp	r3, #42	; 0x2a
 80040d8:	d109      	bne.n	80040ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2228      	movs	r2, #40	; 0x28
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff f828 	bl	800313e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b28      	cmp	r3, #40	; 0x28
 80040f8:	d111      	bne.n	800411e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a15      	ldr	r2, [pc, #84]	; (8004154 <I2C_Slave_STOPF+0x25c>)
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff f829 	bl	800316e <HAL_I2C_ListenCpltCallback>
}
 800411c:	e014      	b.n	8004148 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d002      	beq.n	800412c <I2C_Slave_STOPF+0x234>
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b22      	cmp	r3, #34	; 0x22
 800412a:	d10d      	bne.n	8004148 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fffb 	bl	800313e <HAL_I2C_SlaveRxCpltCallback>
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	080048dd 	.word	0x080048dd
 8004154:	ffff0000 	.word	0xffff0000

08004158 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	2b10      	cmp	r3, #16
 8004174:	d002      	beq.n	800417c <I2C_ITError+0x24>
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d10a      	bne.n	8004192 <I2C_ITError+0x3a>
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b22      	cmp	r3, #34	; 0x22
 8004180:	d107      	bne.n	8004192 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004190:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004198:	2b28      	cmp	r3, #40	; 0x28
 800419a:	d107      	bne.n	80041ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2228      	movs	r2, #40	; 0x28
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041aa:	e015      	b.n	80041d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ba:	d00a      	beq.n	80041d2 <I2C_ITError+0x7a>
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b60      	cmp	r3, #96	; 0x60
 80041c0:	d007      	beq.n	80041d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d162      	bne.n	80042ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d020      	beq.n	8004248 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	4a6a      	ldr	r2, [pc, #424]	; (80043b4 <I2C_ITError+0x25c>)
 800420c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fcaa 	bl	8001b6c <HAL_DMA_Abort_IT>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8089 	beq.w	8004332 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004242:	4610      	mov	r0, r2
 8004244:	4798      	blx	r3
 8004246:	e074      	b.n	8004332 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	4a59      	ldr	r2, [pc, #356]	; (80043b4 <I2C_ITError+0x25c>)
 800424e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd fc89 	bl	8001b6c <HAL_DMA_Abort_IT>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d068      	beq.n	8004332 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d10b      	bne.n	8004286 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042a8:	4610      	mov	r0, r2
 80042aa:	4798      	blx	r3
 80042ac:	e041      	b.n	8004332 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b60      	cmp	r3, #96	; 0x60
 80042b8:	d125      	bne.n	8004306 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d10b      	bne.n	80042ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fe ff5d 	bl	80031be <HAL_I2C_AbortCpltCallback>
 8004304:	e015      	b.n	8004332 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d10b      	bne.n	800432c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fe ff3c 	bl	80031aa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10e      	bne.n	8004360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d113      	bne.n	80043ac <I2C_ITError+0x254>
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b28      	cmp	r3, #40	; 0x28
 8004388:	d110      	bne.n	80043ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <I2C_ITError+0x260>)
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fe fee1 	bl	800316e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080048dd 	.word	0x080048dd
 80043b8:	ffff0000 	.word	0xffff0000

080043bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	817b      	strh	r3, [r7, #10]
 80043ce:	460b      	mov	r3, r1
 80043d0:	813b      	strh	r3, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fb1a 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d103      	bne.n	8004416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e05f      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	492d      	ldr	r1, [pc, #180]	; (80044e4 <I2C_RequestMemoryWrite+0x128>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fb52 	bl	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04c      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fbbc 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02b      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e021      	b.n	80044d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb96 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e005      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00010002 	.word	0x00010002

080044e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2200      	movs	r2, #0
 800452a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fa7c 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d103      	bne.n	8004552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0aa      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	4952      	ldr	r1, [pc, #328]	; (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fab4 	bl	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e097      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fb1e 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d107      	bne.n	80045ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e076      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e021      	b.n	8004614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 faf8 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d107      	bne.n	8004606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e050      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	6a39      	ldr	r1, [r7, #32]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fadd 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b04      	cmp	r3, #4
 800462a:	d107      	bne.n	800463c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e035      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2200      	movs	r2, #0
 8004658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f9e5 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d103      	bne.n	8004680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e013      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004684:	897b      	ldrh	r3, [r7, #10]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa1d 	bl	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	00010002 	.word	0x00010002

080046b8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046ea:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	2200      	movs	r2, #0
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	2200      	movs	r2, #0
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004712:	2b21      	cmp	r3, #33	; 0x21
 8004714:	d007      	beq.n	8004726 <I2C_DMAXferCplt+0x6e>
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800471c:	2b22      	cmp	r3, #34	; 0x22
 800471e:	d131      	bne.n	8004784 <I2C_DMAXferCplt+0xcc>
 8004720:	7cbb      	ldrb	r3, [r7, #18]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d12e      	bne.n	8004784 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004734:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	2b29      	cmp	r3, #41	; 0x29
 8004740:	d10a      	bne.n	8004758 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2221      	movs	r2, #33	; 0x21
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2228      	movs	r2, #40	; 0x28
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004750:	6978      	ldr	r0, [r7, #20]
 8004752:	f7fe fcea 	bl	800312a <HAL_I2C_SlaveTxCpltCallback>
 8004756:	e00c      	b.n	8004772 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d109      	bne.n	8004772 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2222      	movs	r2, #34	; 0x22
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2228      	movs	r2, #40	; 0x28
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f7fe fce6 	bl	800313e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004780:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004782:	e06a      	b.n	800485a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d064      	beq.n	800485a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047c0:	d009      	beq.n	80047d6 <I2C_DMAXferCplt+0x11e>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d006      	beq.n	80047d6 <I2C_DMAXferCplt+0x11e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047ce:	d002      	beq.n	80047d6 <I2C_DMAXferCplt+0x11e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d107      	bne.n	80047e6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f7fe fcc8 	bl	80031aa <HAL_I2C_ErrorCallback>
}
 800481a:	e01e      	b.n	800485a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d10a      	bne.n	8004846 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f7fe fca9 	bl	8003196 <HAL_I2C_MemRxCpltCallback>
}
 8004844:	e009      	b.n	800485a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2212      	movs	r2, #18
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004854:	6978      	ldr	r0, [r7, #20]
 8004856:	f7fe fc5e 	bl	8003116 <HAL_I2C_MasterRxCpltCallback>
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	2200      	movs	r2, #0
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	2200      	movs	r2, #0
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fd fb25 	bl	8001ee0 <HAL_DMA_GetError>
 8004896:	4603      	mov	r3, r0
 8004898:	2b02      	cmp	r3, #2
 800489a:	d01b      	beq.n	80048d4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0210 	orr.w	r2, r3, #16
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7fe fc6b 	bl	80031aa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048f6:	4b4b      	ldr	r3, [pc, #300]	; (8004a24 <I2C_DMAAbort+0x148>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <I2C_DMAAbort+0x14c>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0a1a      	lsrs	r2, r3, #8
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004922:	e00a      	b.n	800493a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d0ea      	beq.n	8004910 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2200      	movs	r2, #0
 800498e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b60      	cmp	r3, #96	; 0x60
 80049aa:	d10e      	bne.n	80049ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7fe fbfb 	bl	80031be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049c8:	e027      	b.n	8004a1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049d0:	2b28      	cmp	r3, #40	; 0x28
 80049d2:	d117      	bne.n	8004a04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2228      	movs	r2, #40	; 0x28
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a02:	e007      	b.n	8004a14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	f7fe fbc8 	bl	80031aa <HAL_I2C_ErrorCallback>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2000009c 	.word	0x2000009c
 8004a28:	14f8b589 	.word	0x14f8b589

08004a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a3c:	e025      	b.n	8004a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d021      	beq.n	8004a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fc fdd9 	bl	80015fc <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d116      	bne.n	8004a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e023      	b.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d10d      	bne.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	e00c      	b.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d0b6      	beq.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae8:	e051      	b.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d123      	bne.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0204 	orr.w	r2, r3, #4
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e046      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d021      	beq.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fc fd57 	bl	80015fc <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d116      	bne.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e020      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10c      	bne.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e00b      	b.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	43da      	mvns	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d18d      	bne.n	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be4:	e02d      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8aa 	bl	8004d40 <I2C_IsAcknowledgeFailed>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e02d      	b.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d021      	beq.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fc fcfd 	bl	80015fc <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e007      	b.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b80      	cmp	r3, #128	; 0x80
 8004c4e:	d1ca      	bne.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c66:	e02d      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f869 	bl	8004d40 <I2C_IsAcknowledgeFailed>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e02d      	b.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d021      	beq.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fc fcbc 	bl	80015fc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d116      	bne.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e007      	b.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d1ca      	bne.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	08db      	lsrs	r3, r3, #3
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	0a1a      	lsrs	r2, r3, #8
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e008      	b.n	8004d2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d28:	d0e9      	beq.n	8004cfe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	2000009c 	.word	0x2000009c
 8004d3c:	14f8b589 	.word	0x14f8b589

08004d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d11b      	bne.n	8004d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dae:	d103      	bne.n	8004db8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004db6:	e007      	b.n	8004dc8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dc0:	d102      	bne.n	8004dc8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e267      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d075      	beq.n	8004ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df2:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d112      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4b82      	ldr	r3, [pc, #520]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	4b7e      	ldr	r3, [pc, #504]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05b      	beq.n	8004edc <HAL_RCC_OscConfig+0x108>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d157      	bne.n	8004edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e242      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x74>
 8004e3a:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e01d      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x98>
 8004e52:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6f      	ldr	r2, [pc, #444]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6c      	ldr	r2, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	4b69      	ldr	r3, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a68      	ldr	r2, [pc, #416]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b66      	ldr	r3, [pc, #408]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a65      	ldr	r2, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fbb6 	bl	80015fc <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fc fbb2 	bl	80015fc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e207      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b5b      	ldr	r3, [pc, #364]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0xc0>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fba2 	bl	80015fc <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fb9e 	bl	80015fc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1f3      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	4b51      	ldr	r3, [pc, #324]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0xe8>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d063      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eea:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d11c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1c7      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4937      	ldr	r1, [pc, #220]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3a:	e03a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCC_OscConfig+0x244>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fc fb57 	bl	80015fc <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f52:	f7fc fb53 	bl	80015fc <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1a8      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4925      	ldr	r1, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_OscConfig+0x244>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fb36 	bl	80015fc <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f94:	f7fc fb32 	bl	80015fc <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e187      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d036      	beq.n	800502c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_RCC_OscConfig+0x248>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fc fb16 	bl	80015fc <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd4:	f7fc fb12 	bl	80015fc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e167      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x200>
 8004ff2:	e01b      	b.n	800502c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_RCC_OscConfig+0x248>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fc faff 	bl	80015fc <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	e00e      	b.n	8005020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005002:	f7fc fafb 	bl	80015fc <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d907      	bls.n	8005020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e150      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
 8005014:	40023800 	.word	0x40023800
 8005018:	42470000 	.word	0x42470000
 800501c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ea      	bne.n	8005002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8097 	beq.w	8005168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	4b7d      	ldr	r3, [pc, #500]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b7a      	ldr	r3, [pc, #488]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b77      	ldr	r3, [pc, #476]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d118      	bne.n	80050a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b74      	ldr	r3, [pc, #464]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a73      	ldr	r2, [pc, #460]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fc fabb 	bl	80015fc <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508a:	f7fc fab7 	bl	80015fc <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e10c      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	4b6a      	ldr	r3, [pc, #424]	; (8005248 <HAL_RCC_OscConfig+0x474>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d106      	bne.n	80050be <HAL_RCC_OscConfig+0x2ea>
 80050b0:	4b64      	ldr	r3, [pc, #400]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a63      	ldr	r2, [pc, #396]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
 80050bc:	e01c      	b.n	80050f8 <HAL_RCC_OscConfig+0x324>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x30c>
 80050c6:	4b5f      	ldr	r3, [pc, #380]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a5e      	ldr	r2, [pc, #376]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a5b      	ldr	r2, [pc, #364]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6713      	str	r3, [r2, #112]	; 0x70
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0x324>
 80050e0:	4b58      	ldr	r3, [pc, #352]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a57      	ldr	r2, [pc, #348]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	4b55      	ldr	r3, [pc, #340]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a54      	ldr	r2, [pc, #336]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc fa7c 	bl	80015fc <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005108:	f7fc fa78 	bl	80015fc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0cb      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	4b49      	ldr	r3, [pc, #292]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ee      	beq.n	8005108 <HAL_RCC_OscConfig+0x334>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512c:	f7fc fa66 	bl	80015fc <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005132:	e00a      	b.n	800514a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005134:	f7fc fa62 	bl	80015fc <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0b5      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	4b3e      	ldr	r3, [pc, #248]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ee      	bne.n	8005134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d105      	bne.n	8005168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515c:	4b39      	ldr	r3, [pc, #228]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a38      	ldr	r2, [pc, #224]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80a1 	beq.w	80052b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005172:	4b34      	ldr	r3, [pc, #208]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b08      	cmp	r3, #8
 800517c:	d05c      	beq.n	8005238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d141      	bne.n	800520a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b31      	ldr	r3, [pc, #196]	; (800524c <HAL_RCC_OscConfig+0x478>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fc fa36 	bl	80015fc <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005194:	f7fc fa32 	bl	80015fc <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e087      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	019b      	lsls	r3, r3, #6
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	3b01      	subs	r3, #1
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	491b      	ldr	r1, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCC_OscConfig+0x478>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e2:	f7fc fa0b 	bl	80015fc <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fc fa07 	bl	80015fc <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e05c      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x416>
 8005208:	e054      	b.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_RCC_OscConfig+0x478>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fc f9f4 	bl	80015fc <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc f9f0 	bl	80015fc <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e045      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCC_OscConfig+0x470>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x444>
 8005236:	e03d      	b.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e038      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
 8005244:	40023800 	.word	0x40023800
 8005248:	40007000 	.word	0x40007000
 800524c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_OscConfig+0x4ec>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d028      	beq.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d121      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d11a      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005288:	4293      	cmp	r3, r2
 800528a:	d111      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	3b01      	subs	r3, #1
 800529a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cc      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90c      	bls.n	8005300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	2b03      	cmp	r3, #3
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e067      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fc f922 	bl	80015fc <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fc f91e 	bl	80015fc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d20c      	bcs.n	800540c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc f882 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00
 8005480:	40023800 	.word	0x40023800
 8005484:	08007f00 	.word	0x08007f00
 8005488:	2000009c 	.word	0x2000009c
 800548c:	200000a0 	.word	0x200000a0

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005494:	b094      	sub	sp, #80	; 0x50
 8005496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
 800549c:	2300      	movs	r3, #0
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	2300      	movs	r3, #0
 80054a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a8:	4b79      	ldr	r3, [pc, #484]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d00d      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x40>
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	f200 80e1 	bhi.w	800567c <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x34>
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_GetSysClockFreq+0x3a>
 80054c2:	e0db      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b73      	ldr	r3, [pc, #460]	; (8005694 <HAL_RCC_GetSysClockFreq+0x204>)
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054c8:	e0db      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ca:	4b73      	ldr	r3, [pc, #460]	; (8005698 <HAL_RCC_GetSysClockFreq+0x208>)
 80054cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ce:	e0d8      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d0:	4b6f      	ldr	r3, [pc, #444]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054da:	4b6d      	ldr	r3, [pc, #436]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d063      	beq.n	80055ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	2200      	movs	r2, #0
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
 80054fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f04f 0000 	mov.w	r0, #0
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	0159      	lsls	r1, r3, #5
 8005510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005514:	0150      	lsls	r0, r2, #5
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4621      	mov	r1, r4
 800551c:	1a51      	subs	r1, r2, r1
 800551e:	6139      	str	r1, [r7, #16]
 8005520:	4629      	mov	r1, r5
 8005522:	eb63 0301 	sbc.w	r3, r3, r1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005534:	4659      	mov	r1, fp
 8005536:	018b      	lsls	r3, r1, #6
 8005538:	4651      	mov	r1, sl
 800553a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800553e:	4651      	mov	r1, sl
 8005540:	018a      	lsls	r2, r1, #6
 8005542:	4651      	mov	r1, sl
 8005544:	ebb2 0801 	subs.w	r8, r2, r1
 8005548:	4659      	mov	r1, fp
 800554a:	eb63 0901 	sbc.w	r9, r3, r1
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005562:	4690      	mov	r8, r2
 8005564:	4699      	mov	r9, r3
 8005566:	4623      	mov	r3, r4
 8005568:	eb18 0303 	adds.w	r3, r8, r3
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	462b      	mov	r3, r5
 8005570:	eb49 0303 	adc.w	r3, r9, r3
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005582:	4629      	mov	r1, r5
 8005584:	024b      	lsls	r3, r1, #9
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800558c:	4621      	mov	r1, r4
 800558e:	024a      	lsls	r2, r1, #9
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	2200      	movs	r2, #0
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
 800559a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800559c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a0:	f7fa fe6e 	bl	8000280 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	e058      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ae:	4b38      	ldr	r3, [pc, #224]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	099b      	lsrs	r3, r3, #6
 80055b4:	2200      	movs	r2, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	4611      	mov	r1, r2
 80055ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	f04f 0000 	mov.w	r0, #0
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	0159      	lsls	r1, r3, #5
 80055d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055da:	0150      	lsls	r0, r2, #5
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4641      	mov	r1, r8
 80055e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055e6:	4649      	mov	r1, r9
 80055e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005600:	ebb2 040a 	subs.w	r4, r2, sl
 8005604:	eb63 050b 	sbc.w	r5, r3, fp
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	00eb      	lsls	r3, r5, #3
 8005612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005616:	00e2      	lsls	r2, r4, #3
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4643      	mov	r3, r8
 800561e:	18e3      	adds	r3, r4, r3
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	464b      	mov	r3, r9
 8005624:	eb45 0303 	adc.w	r3, r5, r3
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005636:	4629      	mov	r1, r5
 8005638:	028b      	lsls	r3, r1, #10
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005640:	4621      	mov	r1, r4
 8005642:	028a      	lsls	r2, r1, #10
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564a:	2200      	movs	r2, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	61fa      	str	r2, [r7, #28]
 8005650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005654:	f7fa fe14 	bl	8000280 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_GetSysClockFreq+0x200>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCC_GetSysClockFreq+0x204>)
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005684:	4618      	mov	r0, r3
 8005686:	3750      	adds	r7, #80	; 0x50
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	00f42400 	.word	0x00f42400
 8005698:	007a1200 	.word	0x007a1200

0800569c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	2000009c 	.word	0x2000009c

080056b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b8:	f7ff fff0 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0a9b      	lsrs	r3, r3, #10
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4903      	ldr	r1, [pc, #12]	; (80056d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	08007f10 	.word	0x08007f10

080056dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056e0:	f7ff ffdc 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0b5b      	lsrs	r3, r3, #13
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4903      	ldr	r1, [pc, #12]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40023800 	.word	0x40023800
 8005700:	08007f10 	.word	0x08007f10

08005704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e03f      	b.n	8005796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fd74 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 ff81 	bl	8006650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800575c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800576c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800577c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d165      	bne.n	8005886 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_Transmit_DMA+0x26>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e05e      	b.n	8005888 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Transmit_DMA+0x38>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e057      	b.n	8005888 <HAL_UART_Transmit_DMA+0xe8>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2221      	movs	r2, #33	; 0x21
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_UART_Transmit_DMA+0xf0>)
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	4a21      	ldr	r2, [pc, #132]	; (8005894 <HAL_UART_Transmit_DMA+0xf4>)
 800580e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <HAL_UART_Transmit_DMA+0xf8>)
 8005816:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	2200      	movs	r2, #0
 800581e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3304      	adds	r3, #4
 8005834:	461a      	mov	r2, r3
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	f7fc f8d0 	bl	80019dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	617b      	str	r3, [r7, #20]
   return(result);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586e:	627a      	str	r2, [r7, #36]	; 0x24
 8005870:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6a39      	ldr	r1, [r7, #32]
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	61fb      	str	r3, [r7, #28]
   return(result);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08005ee9 	.word	0x08005ee9
 8005894:	08005f83 	.word	0x08005f83
 8005898:	080060fb 	.word	0x080060fb

0800589c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d152      	bne.n	800595c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e04b      	b.n	800595e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e044      	b.n	800595e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fc51 	bl	8006190 <UART_Start_Receive_DMA>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80058f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d12c      	bne.n	8005956 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d125      	bne.n	8005950 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	617b      	str	r3, [r7, #20]
   return(result);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f043 0310 	orr.w	r3, r3, #16
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593a:	627a      	str	r2, [r7, #36]	; 0x24
 800593c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6a39      	ldr	r1, [r7, #32]
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	61fb      	str	r3, [r7, #28]
   return(result);
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e5      	bne.n	800591a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800594e:	e002      	b.n	8005956 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800595a:	e000      	b.n	800595e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3730      	adds	r7, #48	; 0x30
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b0ba      	sub	sp, #232	; 0xe8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fd87 	bl	80064da <UART_Receive_IT>
      return;
 80059cc:	e256      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80de 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
 80059d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80d1 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0201 	orr.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
 8005a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d011      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f043 0208 	orr.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 81ed 	beq.w	8005e72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fd12 	bl	80064da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x17a>
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04f      	beq.n	8005b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fc1a 	bl	800631c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d141      	bne.n	8005b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	4a7d      	ldr	r2, [pc, #500]	; (8005d44 <HAL_UART_IRQHandler+0x3dc>)
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc f808 	bl	8001b6c <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e00e      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f9ae 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e00a      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9aa 	bl	8005ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	e006      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9a6 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b8e:	e170      	b.n	8005e72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	bf00      	nop
    return;
 8005b92:	e16e      	b.n	8005e72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f040 814a 	bne.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8143 	beq.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 813c 	beq.w	8005e32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	f040 80b4 	bne.w	8005d48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8140 	beq.w	8005e76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f080 8139 	bcs.w	8005e76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	f000 8088 	beq.w	8005d2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e1      	bne.n	8005c66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e3      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fb feb1 	bl	8001a8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fa fd26 	bl	800078c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d40:	e099      	b.n	8005e76 <HAL_UART_IRQHandler+0x50e>
 8005d42:	bf00      	nop
 8005d44:	080063e3 	.word	0x080063e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 808b 	beq.w	8005e7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8086 	beq.w	8005e7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d92:	647a      	str	r2, [r7, #68]	; 0x44
 8005d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e3      	bne.n	8005d6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3314      	adds	r3, #20
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	623b      	str	r3, [r7, #32]
   return(result);
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dca:	633a      	str	r2, [r7, #48]	; 0x30
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0310 	bic.w	r3, r3, #16
 8005e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e10:	61fa      	str	r2, [r7, #28]
 8005e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69b9      	ldr	r1, [r7, #24]
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e3      	bne.n	8005dec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fa fcae 	bl	800078c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e30:	e023      	b.n	8005e7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_UART_IRQHandler+0x4ea>
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fadd 	bl	800640a <UART_Transmit_IT>
    return;
 8005e50:	e014      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00e      	beq.n	8005e7c <HAL_UART_IRQHandler+0x514>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb1d 	bl	80064aa <UART_EndTransmit_IT>
    return;
 8005e70:	e004      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
    return;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
      return;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <HAL_UART_IRQHandler+0x514>
      return;
 8005e7a:	bf00      	nop
  }
}
 8005e7c:	37e8      	adds	r7, #232	; 0xe8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop

08005e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b090      	sub	sp, #64	; 0x40
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d137      	bne.n	8005f74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f06:	2200      	movs	r2, #0
 8005f08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3314      	adds	r3, #20
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	623b      	str	r3, [r7, #32]
   return(result);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e5      	bne.n	8005f0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
 8005f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f5e:	61fa      	str	r2, [r7, #28]
 8005f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f72:	e002      	b.n	8005f7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005f74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f76:	f7ff ff85 	bl	8005e84 <HAL_UART_TxCpltCallback>
}
 8005f7a:	bf00      	nop
 8005f7c:	3740      	adds	r7, #64	; 0x40
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff ff81 	bl	8005e98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b09c      	sub	sp, #112	; 0x70
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d172      	bne.n	80060a0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e5      	bne.n	8005fc0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006006:	f023 0301 	bic.w	r3, r3, #1
 800600a:	667b      	str	r3, [r7, #100]	; 0x64
 800600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006014:	647a      	str	r2, [r7, #68]	; 0x44
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800601a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e5      	bne.n	8005ff4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	623b      	str	r3, [r7, #32]
   return(result);
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603e:	663b      	str	r3, [r7, #96]	; 0x60
 8006040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006048:	633a      	str	r2, [r7, #48]	; 0x30
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800604e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	2b01      	cmp	r3, #1
 800606a:	d119      	bne.n	80060a0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60fb      	str	r3, [r7, #12]
   return(result);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800608c:	61fa      	str	r2, [r7, #28]
 800608e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	617b      	str	r3, [r7, #20]
   return(result);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ac:	4619      	mov	r1, r3
 80060ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060b0:	f7fa fb6c 	bl	800078c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060b4:	e002      	b.n	80060bc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80060b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060b8:	f7ff fef8 	bl	8005eac <HAL_UART_RxCpltCallback>
}
 80060bc:	bf00      	nop
 80060be:	3770      	adds	r7, #112	; 0x70
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d108      	bne.n	80060ec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7fa fb51 	bl	800078c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060ea:	e002      	b.n	80060f2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fee7 	bl	8005ec0 <HAL_UART_RxHalfCpltCallback>
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b21      	cmp	r3, #33	; 0x21
 800612c:	d108      	bne.n	8006140 <UART_DMAError+0x46>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800613a:	68b8      	ldr	r0, [r7, #8]
 800613c:	f000 f8c6 	bl	80062cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b22      	cmp	r3, #34	; 0x22
 8006160:	d108      	bne.n	8006174 <UART_DMAError+0x7a>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800616e:	68b8      	ldr	r0, [r7, #8]
 8006170:	f000 f8d4 	bl	800631c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	f043 0210 	orr.w	r2, r3, #16
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006180:	68b8      	ldr	r0, [r7, #8]
 8006182:	f7ff fea7 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b098      	sub	sp, #96	; 0x60
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2222      	movs	r2, #34	; 0x22
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	4a40      	ldr	r2, [pc, #256]	; (80062c0 <UART_Start_Receive_DMA+0x130>)
 80061be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <UART_Start_Receive_DMA+0x134>)
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	4a3e      	ldr	r2, [pc, #248]	; (80062c8 <UART_Start_Receive_DMA+0x138>)
 80061ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	2200      	movs	r2, #0
 80061d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80061d8:	f107 0308 	add.w	r3, r7, #8
 80061dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	f7fb fbf4 	bl	80019dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d019      	beq.n	800624e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	65bb      	str	r3, [r7, #88]	; 0x58
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800623a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800623c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e5      	bne.n	800621a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	657b      	str	r3, [r7, #84]	; 0x54
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800626e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e5      	bne.n	800624e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	617b      	str	r3, [r7, #20]
   return(result);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006298:	653b      	str	r3, [r7, #80]	; 0x50
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062a2:	627a      	str	r2, [r7, #36]	; 0x24
 80062a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6a39      	ldr	r1, [r7, #32]
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e5      	bne.n	8006282 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3760      	adds	r7, #96	; 0x60
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	08005f9f 	.word	0x08005f9f
 80062c4:	080060c5 	.word	0x080060c5
 80062c8:	080060fb 	.word	0x080060fb

080062cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	61ba      	str	r2, [r7, #24]
 80062f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006310:	bf00      	nop
 8006312:	3724      	adds	r7, #36	; 0x24
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b095      	sub	sp, #84	; 0x54
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006344:	643a      	str	r2, [r7, #64]	; 0x40
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800634a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	61fb      	str	r3, [r7, #28]
   return(result);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f023 0301 	bic.w	r3, r3, #1
 800636e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3314      	adds	r3, #20
 8006376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e5      	bne.n	8006358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	2b01      	cmp	r3, #1
 8006392:	d119      	bne.n	80063c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f023 0310 	bic.w	r3, r3, #16
 80063aa:	647b      	str	r3, [r7, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b4:	61ba      	str	r2, [r7, #24]
 80063b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6979      	ldr	r1, [r7, #20]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	613b      	str	r3, [r7, #16]
   return(result);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e5      	bne.n	8006394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063d6:	bf00      	nop
 80063d8:	3754      	adds	r7, #84	; 0x54
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff fd69 	bl	8005ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b21      	cmp	r3, #33	; 0x21
 800641c:	d13e      	bne.n	800649c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d114      	bne.n	8006452 <UART_Transmit_IT+0x48>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d110      	bne.n	8006452 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	1c9a      	adds	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]
 8006450:	e008      	b.n	8006464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6211      	str	r1, [r2, #32]
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4619      	mov	r1, r3
 8006472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10f      	bne.n	8006498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fcda 	bl	8005e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b08c      	sub	sp, #48	; 0x30
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b22      	cmp	r3, #34	; 0x22
 80064ec:	f040 80ab 	bne.w	8006646 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f8:	d117      	bne.n	800652a <UART_Receive_IT+0x50>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d113      	bne.n	800652a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006518:	b29a      	uxth	r2, r3
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	1c9a      	adds	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	629a      	str	r2, [r3, #40]	; 0x28
 8006528:	e026      	b.n	8006578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653c:	d007      	beq.n	800654e <UART_Receive_IT+0x74>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <UART_Receive_IT+0x82>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e008      	b.n	800656e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4619      	mov	r1, r3
 8006586:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006588:	2b00      	cmp	r3, #0
 800658a:	d15a      	bne.n	8006642 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0220 	bic.w	r2, r2, #32
 800659a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d135      	bne.n	8006638 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	613b      	str	r3, [r7, #16]
   return(result);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f023 0310 	bic.w	r3, r3, #16
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f2:	623a      	str	r2, [r7, #32]
 80065f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	69f9      	ldr	r1, [r7, #28]
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e5      	bne.n	80065d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	d10a      	bne.n	800662a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fa f8ab 	bl	800078c <HAL_UARTEx_RxEventCallback>
 8006636:	e002      	b.n	800663e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fc37 	bl	8005eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e002      	b.n	8006648 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e000      	b.n	8006648 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3730      	adds	r7, #48	; 0x30
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006654:	b0c0      	sub	sp, #256	; 0x100
 8006656:	af00      	add	r7, sp, #0
 8006658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	68d9      	ldr	r1, [r3, #12]
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	ea40 0301 	orr.w	r3, r0, r1
 8006678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	431a      	orrs	r2, r3
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066a8:	f021 010c 	bic.w	r1, r1, #12
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066b6:	430b      	orrs	r3, r1
 80066b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	6999      	ldr	r1, [r3, #24]
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	ea40 0301 	orr.w	r3, r0, r1
 80066d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b8f      	ldr	r3, [pc, #572]	; (800691c <UART_SetConfig+0x2cc>)
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d005      	beq.n	80066f0 <UART_SetConfig+0xa0>
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b8d      	ldr	r3, [pc, #564]	; (8006920 <UART_SetConfig+0x2d0>)
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d104      	bne.n	80066fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f0:	f7fe fff4 	bl	80056dc <HAL_RCC_GetPCLK2Freq>
 80066f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066f8:	e003      	b.n	8006702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7fe ffdb 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 80066fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670c:	f040 810c 	bne.w	8006928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006714:	2200      	movs	r2, #0
 8006716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800671a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800671e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006722:	4622      	mov	r2, r4
 8006724:	462b      	mov	r3, r5
 8006726:	1891      	adds	r1, r2, r2
 8006728:	65b9      	str	r1, [r7, #88]	; 0x58
 800672a:	415b      	adcs	r3, r3
 800672c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800672e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006732:	4621      	mov	r1, r4
 8006734:	eb12 0801 	adds.w	r8, r2, r1
 8006738:	4629      	mov	r1, r5
 800673a:	eb43 0901 	adc.w	r9, r3, r1
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800674a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800674e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006752:	4690      	mov	r8, r2
 8006754:	4699      	mov	r9, r3
 8006756:	4623      	mov	r3, r4
 8006758:	eb18 0303 	adds.w	r3, r8, r3
 800675c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006760:	462b      	mov	r3, r5
 8006762:	eb49 0303 	adc.w	r3, r9, r3
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800677a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800677e:	460b      	mov	r3, r1
 8006780:	18db      	adds	r3, r3, r3
 8006782:	653b      	str	r3, [r7, #80]	; 0x50
 8006784:	4613      	mov	r3, r2
 8006786:	eb42 0303 	adc.w	r3, r2, r3
 800678a:	657b      	str	r3, [r7, #84]	; 0x54
 800678c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006794:	f7f9 fd74 	bl	8000280 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4b61      	ldr	r3, [pc, #388]	; (8006924 <UART_SetConfig+0x2d4>)
 800679e:	fba3 2302 	umull	r2, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	011c      	lsls	r4, r3, #4
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	64b9      	str	r1, [r7, #72]	; 0x48
 80067c0:	415b      	adcs	r3, r3
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067c8:	4641      	mov	r1, r8
 80067ca:	eb12 0a01 	adds.w	sl, r2, r1
 80067ce:	4649      	mov	r1, r9
 80067d0:	eb43 0b01 	adc.w	fp, r3, r1
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e8:	4692      	mov	sl, r2
 80067ea:	469b      	mov	fp, r3
 80067ec:	4643      	mov	r3, r8
 80067ee:	eb1a 0303 	adds.w	r3, sl, r3
 80067f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067f6:	464b      	mov	r3, r9
 80067f8:	eb4b 0303 	adc.w	r3, fp, r3
 80067fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800680c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006814:	460b      	mov	r3, r1
 8006816:	18db      	adds	r3, r3, r3
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
 800681a:	4613      	mov	r3, r2
 800681c:	eb42 0303 	adc.w	r3, r2, r3
 8006820:	647b      	str	r3, [r7, #68]	; 0x44
 8006822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800682a:	f7f9 fd29 	bl	8000280 <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4611      	mov	r1, r2
 8006834:	4b3b      	ldr	r3, [pc, #236]	; (8006924 <UART_SetConfig+0x2d4>)
 8006836:	fba3 2301 	umull	r2, r3, r3, r1
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	2264      	movs	r2, #100	; 0x64
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	1acb      	subs	r3, r1, r3
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <UART_SetConfig+0x2d4>)
 800684c:	fba3 2302 	umull	r2, r3, r3, r2
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006858:	441c      	add	r4, r3
 800685a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685e:	2200      	movs	r2, #0
 8006860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	1891      	adds	r1, r2, r2
 8006872:	63b9      	str	r1, [r7, #56]	; 0x38
 8006874:	415b      	adcs	r3, r3
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800687c:	4641      	mov	r1, r8
 800687e:	1851      	adds	r1, r2, r1
 8006880:	6339      	str	r1, [r7, #48]	; 0x30
 8006882:	4649      	mov	r1, r9
 8006884:	414b      	adcs	r3, r1
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006894:	4659      	mov	r1, fp
 8006896:	00cb      	lsls	r3, r1, #3
 8006898:	4651      	mov	r1, sl
 800689a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689e:	4651      	mov	r1, sl
 80068a0:	00ca      	lsls	r2, r1, #3
 80068a2:	4610      	mov	r0, r2
 80068a4:	4619      	mov	r1, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	4642      	mov	r2, r8
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068b0:	464b      	mov	r3, r9
 80068b2:	460a      	mov	r2, r1
 80068b4:	eb42 0303 	adc.w	r3, r2, r3
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068d0:	460b      	mov	r3, r1
 80068d2:	18db      	adds	r3, r3, r3
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d6:	4613      	mov	r3, r2
 80068d8:	eb42 0303 	adc.w	r3, r2, r3
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068e6:	f7f9 fccb 	bl	8000280 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <UART_SetConfig+0x2d4>)
 80068f0:	fba3 1302 	umull	r1, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	2164      	movs	r1, #100	; 0x64
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	3332      	adds	r3, #50	; 0x32
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <UART_SetConfig+0x2d4>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 0207 	and.w	r2, r3, #7
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4422      	add	r2, r4
 8006916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006918:	e106      	b.n	8006b28 <UART_SetConfig+0x4d8>
 800691a:	bf00      	nop
 800691c:	40011000 	.word	0x40011000
 8006920:	40011400 	.word	0x40011400
 8006924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800693a:	4642      	mov	r2, r8
 800693c:	464b      	mov	r3, r9
 800693e:	1891      	adds	r1, r2, r2
 8006940:	6239      	str	r1, [r7, #32]
 8006942:	415b      	adcs	r3, r3
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800694a:	4641      	mov	r1, r8
 800694c:	1854      	adds	r4, r2, r1
 800694e:	4649      	mov	r1, r9
 8006950:	eb43 0501 	adc.w	r5, r3, r1
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	00eb      	lsls	r3, r5, #3
 800695e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006962:	00e2      	lsls	r2, r4, #3
 8006964:	4614      	mov	r4, r2
 8006966:	461d      	mov	r5, r3
 8006968:	4643      	mov	r3, r8
 800696a:	18e3      	adds	r3, r4, r3
 800696c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006970:	464b      	mov	r3, r9
 8006972:	eb45 0303 	adc.w	r3, r5, r3
 8006976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006996:	4629      	mov	r1, r5
 8006998:	008b      	lsls	r3, r1, #2
 800699a:	4621      	mov	r1, r4
 800699c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a0:	4621      	mov	r1, r4
 80069a2:	008a      	lsls	r2, r1, #2
 80069a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069a8:	f7f9 fc6a 	bl	8000280 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4b60      	ldr	r3, [pc, #384]	; (8006b34 <UART_SetConfig+0x4e4>)
 80069b2:	fba3 2302 	umull	r2, r3, r3, r2
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	011c      	lsls	r4, r3, #4
 80069ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069cc:	4642      	mov	r2, r8
 80069ce:	464b      	mov	r3, r9
 80069d0:	1891      	adds	r1, r2, r2
 80069d2:	61b9      	str	r1, [r7, #24]
 80069d4:	415b      	adcs	r3, r3
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069dc:	4641      	mov	r1, r8
 80069de:	1851      	adds	r1, r2, r1
 80069e0:	6139      	str	r1, [r7, #16]
 80069e2:	4649      	mov	r1, r9
 80069e4:	414b      	adcs	r3, r1
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069f4:	4659      	mov	r1, fp
 80069f6:	00cb      	lsls	r3, r1, #3
 80069f8:	4651      	mov	r1, sl
 80069fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fe:	4651      	mov	r1, sl
 8006a00:	00ca      	lsls	r2, r1, #3
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	4642      	mov	r2, r8
 8006a0a:	189b      	adds	r3, r3, r2
 8006a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a10:	464b      	mov	r3, r9
 8006a12:	460a      	mov	r2, r1
 8006a14:	eb42 0303 	adc.w	r3, r2, r3
 8006a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a34:	4649      	mov	r1, r9
 8006a36:	008b      	lsls	r3, r1, #2
 8006a38:	4641      	mov	r1, r8
 8006a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a3e:	4641      	mov	r1, r8
 8006a40:	008a      	lsls	r2, r1, #2
 8006a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a46:	f7f9 fc1b 	bl	8000280 <__aeabi_uldivmod>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4b38      	ldr	r3, [pc, #224]	; (8006b34 <UART_SetConfig+0x4e4>)
 8006a52:	fba3 2301 	umull	r2, r3, r3, r1
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	2264      	movs	r2, #100	; 0x64
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	1acb      	subs	r3, r1, r3
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	3332      	adds	r3, #50	; 0x32
 8006a64:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <UART_SetConfig+0x4e4>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a70:	441c      	add	r4, r3
 8006a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a76:	2200      	movs	r2, #0
 8006a78:	673b      	str	r3, [r7, #112]	; 0x70
 8006a7a:	677a      	str	r2, [r7, #116]	; 0x74
 8006a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	1891      	adds	r1, r2, r2
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	415b      	adcs	r3, r3
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a90:	4641      	mov	r1, r8
 8006a92:	1851      	adds	r1, r2, r1
 8006a94:	6039      	str	r1, [r7, #0]
 8006a96:	4649      	mov	r1, r9
 8006a98:	414b      	adcs	r3, r1
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	00cb      	lsls	r3, r1, #3
 8006aac:	4651      	mov	r1, sl
 8006aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	00ca      	lsls	r2, r1, #3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	4642      	mov	r2, r8
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	460a      	mov	r2, r1
 8006ac6:	eb42 0303 	adc.w	r3, r2, r3
 8006aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad6:	667a      	str	r2, [r7, #100]	; 0x64
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	008b      	lsls	r3, r1, #2
 8006ae8:	4641      	mov	r1, r8
 8006aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aee:	4641      	mov	r1, r8
 8006af0:	008a      	lsls	r2, r1, #2
 8006af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006af6:	f7f9 fbc3 	bl	8000280 <__aeabi_uldivmod>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <UART_SetConfig+0x4e4>)
 8006b00:	fba3 1302 	umull	r1, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	2164      	movs	r1, #100	; 0x64
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	3332      	adds	r3, #50	; 0x32
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <UART_SetConfig+0x4e4>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	f003 020f 	and.w	r2, r3, #15
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4422      	add	r2, r4
 8006b26:	609a      	str	r2, [r3, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b34:	51eb851f 	.word	0x51eb851f

08006b38 <_strtol_l.constprop.0>:
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3e:	d001      	beq.n	8006b44 <_strtol_l.constprop.0+0xc>
 8006b40:	2b24      	cmp	r3, #36	; 0x24
 8006b42:	d906      	bls.n	8006b52 <_strtol_l.constprop.0+0x1a>
 8006b44:	f000 f926 	bl	8006d94 <__errno>
 8006b48:	2316      	movs	r3, #22
 8006b4a:	6003      	str	r3, [r0, #0]
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c38 <_strtol_l.constprop.0+0x100>
 8006b56:	460d      	mov	r5, r1
 8006b58:	462e      	mov	r6, r5
 8006b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006b62:	f017 0708 	ands.w	r7, r7, #8
 8006b66:	d1f7      	bne.n	8006b58 <_strtol_l.constprop.0+0x20>
 8006b68:	2c2d      	cmp	r4, #45	; 0x2d
 8006b6a:	d132      	bne.n	8006bd2 <_strtol_l.constprop.0+0x9a>
 8006b6c:	782c      	ldrb	r4, [r5, #0]
 8006b6e:	2701      	movs	r7, #1
 8006b70:	1cb5      	adds	r5, r6, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d05b      	beq.n	8006c2e <_strtol_l.constprop.0+0xf6>
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d109      	bne.n	8006b8e <_strtol_l.constprop.0+0x56>
 8006b7a:	2c30      	cmp	r4, #48	; 0x30
 8006b7c:	d107      	bne.n	8006b8e <_strtol_l.constprop.0+0x56>
 8006b7e:	782c      	ldrb	r4, [r5, #0]
 8006b80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b84:	2c58      	cmp	r4, #88	; 0x58
 8006b86:	d14d      	bne.n	8006c24 <_strtol_l.constprop.0+0xec>
 8006b88:	786c      	ldrb	r4, [r5, #1]
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	3502      	adds	r5, #2
 8006b8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b96:	f04f 0e00 	mov.w	lr, #0
 8006b9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b9e:	4676      	mov	r6, lr
 8006ba0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ba4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006ba8:	f1bc 0f09 	cmp.w	ip, #9
 8006bac:	d816      	bhi.n	8006bdc <_strtol_l.constprop.0+0xa4>
 8006bae:	4664      	mov	r4, ip
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	dd24      	ble.n	8006bfe <_strtol_l.constprop.0+0xc6>
 8006bb4:	f1be 3fff 	cmp.w	lr, #4294967295
 8006bb8:	d008      	beq.n	8006bcc <_strtol_l.constprop.0+0x94>
 8006bba:	45b1      	cmp	r9, r6
 8006bbc:	d31c      	bcc.n	8006bf8 <_strtol_l.constprop.0+0xc0>
 8006bbe:	d101      	bne.n	8006bc4 <_strtol_l.constprop.0+0x8c>
 8006bc0:	45a2      	cmp	sl, r4
 8006bc2:	db19      	blt.n	8006bf8 <_strtol_l.constprop.0+0xc0>
 8006bc4:	fb06 4603 	mla	r6, r6, r3, r4
 8006bc8:	f04f 0e01 	mov.w	lr, #1
 8006bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bd0:	e7e8      	b.n	8006ba4 <_strtol_l.constprop.0+0x6c>
 8006bd2:	2c2b      	cmp	r4, #43	; 0x2b
 8006bd4:	bf04      	itt	eq
 8006bd6:	782c      	ldrbeq	r4, [r5, #0]
 8006bd8:	1cb5      	addeq	r5, r6, #2
 8006bda:	e7ca      	b.n	8006b72 <_strtol_l.constprop.0+0x3a>
 8006bdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006be0:	f1bc 0f19 	cmp.w	ip, #25
 8006be4:	d801      	bhi.n	8006bea <_strtol_l.constprop.0+0xb2>
 8006be6:	3c37      	subs	r4, #55	; 0x37
 8006be8:	e7e2      	b.n	8006bb0 <_strtol_l.constprop.0+0x78>
 8006bea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006bee:	f1bc 0f19 	cmp.w	ip, #25
 8006bf2:	d804      	bhi.n	8006bfe <_strtol_l.constprop.0+0xc6>
 8006bf4:	3c57      	subs	r4, #87	; 0x57
 8006bf6:	e7db      	b.n	8006bb0 <_strtol_l.constprop.0+0x78>
 8006bf8:	f04f 3eff 	mov.w	lr, #4294967295
 8006bfc:	e7e6      	b.n	8006bcc <_strtol_l.constprop.0+0x94>
 8006bfe:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c02:	d105      	bne.n	8006c10 <_strtol_l.constprop.0+0xd8>
 8006c04:	2322      	movs	r3, #34	; 0x22
 8006c06:	6003      	str	r3, [r0, #0]
 8006c08:	4646      	mov	r6, r8
 8006c0a:	b942      	cbnz	r2, 8006c1e <_strtol_l.constprop.0+0xe6>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	e79e      	b.n	8006b4e <_strtol_l.constprop.0+0x16>
 8006c10:	b107      	cbz	r7, 8006c14 <_strtol_l.constprop.0+0xdc>
 8006c12:	4276      	negs	r6, r6
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	d0f9      	beq.n	8006c0c <_strtol_l.constprop.0+0xd4>
 8006c18:	f1be 0f00 	cmp.w	lr, #0
 8006c1c:	d000      	beq.n	8006c20 <_strtol_l.constprop.0+0xe8>
 8006c1e:	1e69      	subs	r1, r5, #1
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	e7f3      	b.n	8006c0c <_strtol_l.constprop.0+0xd4>
 8006c24:	2430      	movs	r4, #48	; 0x30
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1b1      	bne.n	8006b8e <_strtol_l.constprop.0+0x56>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	e7af      	b.n	8006b8e <_strtol_l.constprop.0+0x56>
 8006c2e:	2c30      	cmp	r4, #48	; 0x30
 8006c30:	d0a5      	beq.n	8006b7e <_strtol_l.constprop.0+0x46>
 8006c32:	230a      	movs	r3, #10
 8006c34:	e7ab      	b.n	8006b8e <_strtol_l.constprop.0+0x56>
 8006c36:	bf00      	nop
 8006c38:	08007f21 	.word	0x08007f21

08006c3c <_strtol_r>:
 8006c3c:	f7ff bf7c 	b.w	8006b38 <_strtol_l.constprop.0>

08006c40 <strtol>:
 8006c40:	4613      	mov	r3, r2
 8006c42:	460a      	mov	r2, r1
 8006c44:	4601      	mov	r1, r0
 8006c46:	4802      	ldr	r0, [pc, #8]	; (8006c50 <strtol+0x10>)
 8006c48:	6800      	ldr	r0, [r0, #0]
 8006c4a:	f7ff bf75 	b.w	8006b38 <_strtol_l.constprop.0>
 8006c4e:	bf00      	nop
 8006c50:	200000f4 	.word	0x200000f4

08006c54 <siprintf>:
 8006c54:	b40e      	push	{r1, r2, r3}
 8006c56:	b500      	push	{lr}
 8006c58:	b09c      	sub	sp, #112	; 0x70
 8006c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	9006      	str	r0, [sp, #24]
 8006c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c64:	4809      	ldr	r0, [pc, #36]	; (8006c8c <siprintf+0x38>)
 8006c66:	9107      	str	r1, [sp, #28]
 8006c68:	9104      	str	r1, [sp, #16]
 8006c6a:	4909      	ldr	r1, [pc, #36]	; (8006c90 <siprintf+0x3c>)
 8006c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c70:	9105      	str	r1, [sp, #20]
 8006c72:	6800      	ldr	r0, [r0, #0]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	a902      	add	r1, sp, #8
 8006c78:	f000 fa12 	bl	80070a0 <_svfiprintf_r>
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	b01c      	add	sp, #112	; 0x70
 8006c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c88:	b003      	add	sp, #12
 8006c8a:	4770      	bx	lr
 8006c8c:	200000f4 	.word	0x200000f4
 8006c90:	ffff0208 	.word	0xffff0208

08006c94 <siscanf>:
 8006c94:	b40e      	push	{r1, r2, r3}
 8006c96:	b510      	push	{r4, lr}
 8006c98:	b09f      	sub	sp, #124	; 0x7c
 8006c9a:	ac21      	add	r4, sp, #132	; 0x84
 8006c9c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006ca0:	f854 2b04 	ldr.w	r2, [r4], #4
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006caa:	9004      	str	r0, [sp, #16]
 8006cac:	9008      	str	r0, [sp, #32]
 8006cae:	f7f9 fa8f 	bl	80001d0 <strlen>
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <siscanf+0x50>)
 8006cb4:	9005      	str	r0, [sp, #20]
 8006cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8006cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cba:	480b      	ldr	r0, [pc, #44]	; (8006ce8 <siscanf+0x54>)
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	6800      	ldr	r0, [r0, #0]
 8006cc0:	9403      	str	r4, [sp, #12]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8006cc6:	9316      	str	r3, [sp, #88]	; 0x58
 8006cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ccc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006cd0:	a904      	add	r1, sp, #16
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	f000 fb3c 	bl	8007350 <__ssvfiscanf_r>
 8006cd8:	b01f      	add	sp, #124	; 0x7c
 8006cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cde:	b003      	add	sp, #12
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	08006ced 	.word	0x08006ced
 8006ce8:	200000f4 	.word	0x200000f4

08006cec <__seofread>:
 8006cec:	2000      	movs	r0, #0
 8006cee:	4770      	bx	lr

08006cf0 <memset>:
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d100      	bne.n	8006cfa <memset+0xa>
 8006cf8:	4770      	bx	lr
 8006cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfe:	e7f9      	b.n	8006cf4 <memset+0x4>

08006d00 <strcat>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4602      	mov	r2, r0
 8006d04:	7814      	ldrb	r4, [r2, #0]
 8006d06:	4613      	mov	r3, r2
 8006d08:	3201      	adds	r2, #1
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d1fa      	bne.n	8006d04 <strcat+0x4>
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d1f9      	bne.n	8006d10 <strcat+0x10>
 8006d1c:	bd10      	pop	{r4, pc}

08006d1e <strncmp>:
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	b16a      	cbz	r2, 8006d3e <strncmp+0x20>
 8006d22:	3901      	subs	r1, #1
 8006d24:	1884      	adds	r4, r0, r2
 8006d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d103      	bne.n	8006d3a <strncmp+0x1c>
 8006d32:	42a0      	cmp	r0, r4
 8006d34:	d001      	beq.n	8006d3a <strncmp+0x1c>
 8006d36:	2a00      	cmp	r2, #0
 8006d38:	d1f5      	bne.n	8006d26 <strncmp+0x8>
 8006d3a:	1ad0      	subs	r0, r2, r3
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	4610      	mov	r0, r2
 8006d40:	e7fc      	b.n	8006d3c <strncmp+0x1e>

08006d42 <strncpy>:
 8006d42:	b510      	push	{r4, lr}
 8006d44:	3901      	subs	r1, #1
 8006d46:	4603      	mov	r3, r0
 8006d48:	b132      	cbz	r2, 8006d58 <strncpy+0x16>
 8006d4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d4e:	f803 4b01 	strb.w	r4, [r3], #1
 8006d52:	3a01      	subs	r2, #1
 8006d54:	2c00      	cmp	r4, #0
 8006d56:	d1f7      	bne.n	8006d48 <strncpy+0x6>
 8006d58:	441a      	add	r2, r3
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d100      	bne.n	8006d62 <strncpy+0x20>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	f803 1b01 	strb.w	r1, [r3], #1
 8006d66:	e7f9      	b.n	8006d5c <strncpy+0x1a>

08006d68 <strstr>:
 8006d68:	780a      	ldrb	r2, [r1, #0]
 8006d6a:	b570      	push	{r4, r5, r6, lr}
 8006d6c:	b96a      	cbnz	r2, 8006d8a <strstr+0x22>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d109      	bne.n	8006d88 <strstr+0x20>
 8006d74:	460c      	mov	r4, r1
 8006d76:	4605      	mov	r5, r0
 8006d78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0f6      	beq.n	8006d6e <strstr+0x6>
 8006d80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d84:	429e      	cmp	r6, r3
 8006d86:	d0f7      	beq.n	8006d78 <strstr+0x10>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	7803      	ldrb	r3, [r0, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ef      	bne.n	8006d70 <strstr+0x8>
 8006d90:	4618      	mov	r0, r3
 8006d92:	e7ec      	b.n	8006d6e <strstr+0x6>

08006d94 <__errno>:
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <__errno+0x8>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	200000f4 	.word	0x200000f4

08006da0 <__libc_init_array>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4d0d      	ldr	r5, [pc, #52]	; (8006dd8 <__libc_init_array+0x38>)
 8006da4:	4c0d      	ldr	r4, [pc, #52]	; (8006ddc <__libc_init_array+0x3c>)
 8006da6:	1b64      	subs	r4, r4, r5
 8006da8:	10a4      	asrs	r4, r4, #2
 8006daa:	2600      	movs	r6, #0
 8006dac:	42a6      	cmp	r6, r4
 8006dae:	d109      	bne.n	8006dc4 <__libc_init_array+0x24>
 8006db0:	4d0b      	ldr	r5, [pc, #44]	; (8006de0 <__libc_init_array+0x40>)
 8006db2:	4c0c      	ldr	r4, [pc, #48]	; (8006de4 <__libc_init_array+0x44>)
 8006db4:	f001 f87a 	bl	8007eac <_init>
 8006db8:	1b64      	subs	r4, r4, r5
 8006dba:	10a4      	asrs	r4, r4, #2
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	42a6      	cmp	r6, r4
 8006dc0:	d105      	bne.n	8006dce <__libc_init_array+0x2e>
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc8:	4798      	blx	r3
 8006dca:	3601      	adds	r6, #1
 8006dcc:	e7ee      	b.n	8006dac <__libc_init_array+0xc>
 8006dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd2:	4798      	blx	r3
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	e7f2      	b.n	8006dbe <__libc_init_array+0x1e>
 8006dd8:	08008078 	.word	0x08008078
 8006ddc:	08008078 	.word	0x08008078
 8006de0:	08008078 	.word	0x08008078
 8006de4:	0800807c 	.word	0x0800807c

08006de8 <__retarget_lock_acquire_recursive>:
 8006de8:	4770      	bx	lr

08006dea <__retarget_lock_release_recursive>:
 8006dea:	4770      	bx	lr

08006dec <strcpy>:
 8006dec:	4603      	mov	r3, r0
 8006dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006df2:	f803 2b01 	strb.w	r2, [r3], #1
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d1f9      	bne.n	8006dee <strcpy+0x2>
 8006dfa:	4770      	bx	lr

08006dfc <_free_r>:
 8006dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d044      	beq.n	8006e8c <_free_r+0x90>
 8006e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e0e:	bfb8      	it	lt
 8006e10:	18e4      	addlt	r4, r4, r3
 8006e12:	f000 f8df 	bl	8006fd4 <__malloc_lock>
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <_free_r+0x94>)
 8006e18:	9801      	ldr	r0, [sp, #4]
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x30>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e28:	f000 b8da 	b.w	8006fe0 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x46>
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	1961      	adds	r1, r4, r5
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x22>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x50>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x46>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1855      	adds	r5, r2, r1
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x70>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	4421      	add	r1, r4
 8006e58:	1854      	adds	r4, r2, r1
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x26>
 8006e60:	681c      	ldr	r4, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	440c      	add	r4, r1
 8006e68:	6014      	str	r4, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x26>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x78>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x26>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x26>
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	200005cc 	.word	0x200005cc

08006e94 <sbrk_aligned>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4e0e      	ldr	r6, [pc, #56]	; (8006ed0 <sbrk_aligned+0x3c>)
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6831      	ldr	r1, [r6, #0]
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	b911      	cbnz	r1, 8006ea6 <sbrk_aligned+0x12>
 8006ea0:	f000 ff3a 	bl	8007d18 <_sbrk_r>
 8006ea4:	6030      	str	r0, [r6, #0]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 ff35 	bl	8007d18 <_sbrk_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d00a      	beq.n	8006ec8 <sbrk_aligned+0x34>
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d007      	beq.n	8006ecc <sbrk_aligned+0x38>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 ff2a 	bl	8007d18 <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d101      	bne.n	8006ecc <sbrk_aligned+0x38>
 8006ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	200005d0 	.word	0x200005d0

08006ed4 <_malloc_r>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	1ccd      	adds	r5, r1, #3
 8006eda:	f025 0503 	bic.w	r5, r5, #3
 8006ede:	3508      	adds	r5, #8
 8006ee0:	2d0c      	cmp	r5, #12
 8006ee2:	bf38      	it	cc
 8006ee4:	250c      	movcc	r5, #12
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	db01      	blt.n	8006ef0 <_malloc_r+0x1c>
 8006eec:	42a9      	cmp	r1, r5
 8006eee:	d905      	bls.n	8006efc <_malloc_r+0x28>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fd0 <_malloc_r+0xfc>
 8006f00:	f000 f868 	bl	8006fd4 <__malloc_lock>
 8006f04:	f8d8 3000 	ldr.w	r3, [r8]
 8006f08:	461c      	mov	r4, r3
 8006f0a:	bb5c      	cbnz	r4, 8006f64 <_malloc_r+0x90>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7ff ffc0 	bl	8006e94 <sbrk_aligned>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	4604      	mov	r4, r0
 8006f18:	d155      	bne.n	8006fc6 <_malloc_r+0xf2>
 8006f1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f1e:	4626      	mov	r6, r4
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d145      	bne.n	8006fb0 <_malloc_r+0xdc>
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	d048      	beq.n	8006fba <_malloc_r+0xe6>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	eb04 0903 	add.w	r9, r4, r3
 8006f32:	f000 fef1 	bl	8007d18 <_sbrk_r>
 8006f36:	4581      	cmp	r9, r0
 8006f38:	d13f      	bne.n	8006fba <_malloc_r+0xe6>
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	1a6d      	subs	r5, r5, r1
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff ffa7 	bl	8006e94 <sbrk_aligned>
 8006f46:	3001      	adds	r0, #1
 8006f48:	d037      	beq.n	8006fba <_malloc_r+0xe6>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	442b      	add	r3, r5
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d038      	beq.n	8006fca <_malloc_r+0xf6>
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	42a2      	cmp	r2, r4
 8006f5c:	d12b      	bne.n	8006fb6 <_malloc_r+0xe2>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	e00f      	b.n	8006f84 <_malloc_r+0xb0>
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	1b52      	subs	r2, r2, r5
 8006f68:	d41f      	bmi.n	8006faa <_malloc_r+0xd6>
 8006f6a:	2a0b      	cmp	r2, #11
 8006f6c:	d917      	bls.n	8006f9e <_malloc_r+0xca>
 8006f6e:	1961      	adds	r1, r4, r5
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	6025      	str	r5, [r4, #0]
 8006f74:	bf18      	it	ne
 8006f76:	6059      	strne	r1, [r3, #4]
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	bf08      	it	eq
 8006f7c:	f8c8 1000 	streq.w	r1, [r8]
 8006f80:	5162      	str	r2, [r4, r5]
 8006f82:	604b      	str	r3, [r1, #4]
 8006f84:	4638      	mov	r0, r7
 8006f86:	f104 060b 	add.w	r6, r4, #11
 8006f8a:	f000 f829 	bl	8006fe0 <__malloc_unlock>
 8006f8e:	f026 0607 	bic.w	r6, r6, #7
 8006f92:	1d23      	adds	r3, r4, #4
 8006f94:	1af2      	subs	r2, r6, r3
 8006f96:	d0ae      	beq.n	8006ef6 <_malloc_r+0x22>
 8006f98:	1b9b      	subs	r3, r3, r6
 8006f9a:	50a3      	str	r3, [r4, r2]
 8006f9c:	e7ab      	b.n	8006ef6 <_malloc_r+0x22>
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	d1dd      	bne.n	8006f60 <_malloc_r+0x8c>
 8006fa4:	f8c8 2000 	str.w	r2, [r8]
 8006fa8:	e7ec      	b.n	8006f84 <_malloc_r+0xb0>
 8006faa:	4623      	mov	r3, r4
 8006fac:	6864      	ldr	r4, [r4, #4]
 8006fae:	e7ac      	b.n	8006f0a <_malloc_r+0x36>
 8006fb0:	4634      	mov	r4, r6
 8006fb2:	6876      	ldr	r6, [r6, #4]
 8006fb4:	e7b4      	b.n	8006f20 <_malloc_r+0x4c>
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	e7cc      	b.n	8006f54 <_malloc_r+0x80>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f000 f80e 	bl	8006fe0 <__malloc_unlock>
 8006fc4:	e797      	b.n	8006ef6 <_malloc_r+0x22>
 8006fc6:	6025      	str	r5, [r4, #0]
 8006fc8:	e7dc      	b.n	8006f84 <_malloc_r+0xb0>
 8006fca:	605b      	str	r3, [r3, #4]
 8006fcc:	deff      	udf	#255	; 0xff
 8006fce:	bf00      	nop
 8006fd0:	200005cc 	.word	0x200005cc

08006fd4 <__malloc_lock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__malloc_lock+0x8>)
 8006fd6:	f7ff bf07 	b.w	8006de8 <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	200005c8 	.word	0x200005c8

08006fe0 <__malloc_unlock>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__malloc_unlock+0x8>)
 8006fe2:	f7ff bf02 	b.w	8006dea <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200005c8 	.word	0x200005c8

08006fec <__ssputs_r>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	688e      	ldr	r6, [r1, #8]
 8006ff2:	461f      	mov	r7, r3
 8006ff4:	42be      	cmp	r6, r7
 8006ff6:	680b      	ldr	r3, [r1, #0]
 8006ff8:	4682      	mov	sl, r0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	4690      	mov	r8, r2
 8006ffe:	d82c      	bhi.n	800705a <__ssputs_r+0x6e>
 8007000:	898a      	ldrh	r2, [r1, #12]
 8007002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007006:	d026      	beq.n	8007056 <__ssputs_r+0x6a>
 8007008:	6965      	ldr	r5, [r4, #20]
 800700a:	6909      	ldr	r1, [r1, #16]
 800700c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007010:	eba3 0901 	sub.w	r9, r3, r1
 8007014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007018:	1c7b      	adds	r3, r7, #1
 800701a:	444b      	add	r3, r9
 800701c:	106d      	asrs	r5, r5, #1
 800701e:	429d      	cmp	r5, r3
 8007020:	bf38      	it	cc
 8007022:	461d      	movcc	r5, r3
 8007024:	0553      	lsls	r3, r2, #21
 8007026:	d527      	bpl.n	8007078 <__ssputs_r+0x8c>
 8007028:	4629      	mov	r1, r5
 800702a:	f7ff ff53 	bl	8006ed4 <_malloc_r>
 800702e:	4606      	mov	r6, r0
 8007030:	b360      	cbz	r0, 800708c <__ssputs_r+0xa0>
 8007032:	6921      	ldr	r1, [r4, #16]
 8007034:	464a      	mov	r2, r9
 8007036:	f000 fe7f 	bl	8007d38 <memcpy>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	6126      	str	r6, [r4, #16]
 8007048:	6165      	str	r5, [r4, #20]
 800704a:	444e      	add	r6, r9
 800704c:	eba5 0509 	sub.w	r5, r5, r9
 8007050:	6026      	str	r6, [r4, #0]
 8007052:	60a5      	str	r5, [r4, #8]
 8007054:	463e      	mov	r6, r7
 8007056:	42be      	cmp	r6, r7
 8007058:	d900      	bls.n	800705c <__ssputs_r+0x70>
 800705a:	463e      	mov	r6, r7
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	4632      	mov	r2, r6
 8007060:	4641      	mov	r1, r8
 8007062:	f000 fe3e 	bl	8007ce2 <memmove>
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	1b9b      	subs	r3, r3, r6
 800706a:	60a3      	str	r3, [r4, #8]
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	4433      	add	r3, r6
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2000      	movs	r0, #0
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	462a      	mov	r2, r5
 800707a:	f000 fe6b 	bl	8007d54 <_realloc_r>
 800707e:	4606      	mov	r6, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	d1e0      	bne.n	8007046 <__ssputs_r+0x5a>
 8007084:	6921      	ldr	r1, [r4, #16]
 8007086:	4650      	mov	r0, sl
 8007088:	f7ff feb8 	bl	8006dfc <_free_r>
 800708c:	230c      	movs	r3, #12
 800708e:	f8ca 3000 	str.w	r3, [sl]
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	f04f 30ff 	mov.w	r0, #4294967295
 800709e:	e7e9      	b.n	8007074 <__ssputs_r+0x88>

080070a0 <_svfiprintf_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4698      	mov	r8, r3
 80070a6:	898b      	ldrh	r3, [r1, #12]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	b09d      	sub	sp, #116	; 0x74
 80070ac:	4607      	mov	r7, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	d50e      	bpl.n	80070d2 <_svfiprintf_r+0x32>
 80070b4:	690b      	ldr	r3, [r1, #16]
 80070b6:	b963      	cbnz	r3, 80070d2 <_svfiprintf_r+0x32>
 80070b8:	2140      	movs	r1, #64	; 0x40
 80070ba:	f7ff ff0b 	bl	8006ed4 <_malloc_r>
 80070be:	6028      	str	r0, [r5, #0]
 80070c0:	6128      	str	r0, [r5, #16]
 80070c2:	b920      	cbnz	r0, 80070ce <_svfiprintf_r+0x2e>
 80070c4:	230c      	movs	r3, #12
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e0d0      	b.n	8007270 <_svfiprintf_r+0x1d0>
 80070ce:	2340      	movs	r3, #64	; 0x40
 80070d0:	616b      	str	r3, [r5, #20]
 80070d2:	2300      	movs	r3, #0
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	2320      	movs	r3, #32
 80070d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80070e0:	2330      	movs	r3, #48	; 0x30
 80070e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007288 <_svfiprintf_r+0x1e8>
 80070e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070ea:	f04f 0901 	mov.w	r9, #1
 80070ee:	4623      	mov	r3, r4
 80070f0:	469a      	mov	sl, r3
 80070f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f6:	b10a      	cbz	r2, 80070fc <_svfiprintf_r+0x5c>
 80070f8:	2a25      	cmp	r2, #37	; 0x25
 80070fa:	d1f9      	bne.n	80070f0 <_svfiprintf_r+0x50>
 80070fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007100:	d00b      	beq.n	800711a <_svfiprintf_r+0x7a>
 8007102:	465b      	mov	r3, fp
 8007104:	4622      	mov	r2, r4
 8007106:	4629      	mov	r1, r5
 8007108:	4638      	mov	r0, r7
 800710a:	f7ff ff6f 	bl	8006fec <__ssputs_r>
 800710e:	3001      	adds	r0, #1
 8007110:	f000 80a9 	beq.w	8007266 <_svfiprintf_r+0x1c6>
 8007114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007116:	445a      	add	r2, fp
 8007118:	9209      	str	r2, [sp, #36]	; 0x24
 800711a:	f89a 3000 	ldrb.w	r3, [sl]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80a1 	beq.w	8007266 <_svfiprintf_r+0x1c6>
 8007124:	2300      	movs	r3, #0
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800712e:	f10a 0a01 	add.w	sl, sl, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	9307      	str	r3, [sp, #28]
 8007136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800713a:	931a      	str	r3, [sp, #104]	; 0x68
 800713c:	4654      	mov	r4, sl
 800713e:	2205      	movs	r2, #5
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	4850      	ldr	r0, [pc, #320]	; (8007288 <_svfiprintf_r+0x1e8>)
 8007146:	f7f9 f84b 	bl	80001e0 <memchr>
 800714a:	9a04      	ldr	r2, [sp, #16]
 800714c:	b9d8      	cbnz	r0, 8007186 <_svfiprintf_r+0xe6>
 800714e:	06d0      	lsls	r0, r2, #27
 8007150:	bf44      	itt	mi
 8007152:	2320      	movmi	r3, #32
 8007154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007158:	0711      	lsls	r1, r2, #28
 800715a:	bf44      	itt	mi
 800715c:	232b      	movmi	r3, #43	; 0x2b
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007162:	f89a 3000 	ldrb.w	r3, [sl]
 8007166:	2b2a      	cmp	r3, #42	; 0x2a
 8007168:	d015      	beq.n	8007196 <_svfiprintf_r+0xf6>
 800716a:	9a07      	ldr	r2, [sp, #28]
 800716c:	4654      	mov	r4, sl
 800716e:	2000      	movs	r0, #0
 8007170:	f04f 0c0a 	mov.w	ip, #10
 8007174:	4621      	mov	r1, r4
 8007176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800717a:	3b30      	subs	r3, #48	; 0x30
 800717c:	2b09      	cmp	r3, #9
 800717e:	d94d      	bls.n	800721c <_svfiprintf_r+0x17c>
 8007180:	b1b0      	cbz	r0, 80071b0 <_svfiprintf_r+0x110>
 8007182:	9207      	str	r2, [sp, #28]
 8007184:	e014      	b.n	80071b0 <_svfiprintf_r+0x110>
 8007186:	eba0 0308 	sub.w	r3, r0, r8
 800718a:	fa09 f303 	lsl.w	r3, r9, r3
 800718e:	4313      	orrs	r3, r2
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	46a2      	mov	sl, r4
 8007194:	e7d2      	b.n	800713c <_svfiprintf_r+0x9c>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfbb      	ittet	lt
 80071a2:	425b      	neglt	r3, r3
 80071a4:	f042 0202 	orrlt.w	r2, r2, #2
 80071a8:	9307      	strge	r3, [sp, #28]
 80071aa:	9307      	strlt	r3, [sp, #28]
 80071ac:	bfb8      	it	lt
 80071ae:	9204      	strlt	r2, [sp, #16]
 80071b0:	7823      	ldrb	r3, [r4, #0]
 80071b2:	2b2e      	cmp	r3, #46	; 0x2e
 80071b4:	d10c      	bne.n	80071d0 <_svfiprintf_r+0x130>
 80071b6:	7863      	ldrb	r3, [r4, #1]
 80071b8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ba:	d134      	bne.n	8007226 <_svfiprintf_r+0x186>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	9203      	str	r2, [sp, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bfb8      	it	lt
 80071c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071cc:	3402      	adds	r4, #2
 80071ce:	9305      	str	r3, [sp, #20]
 80071d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007298 <_svfiprintf_r+0x1f8>
 80071d4:	7821      	ldrb	r1, [r4, #0]
 80071d6:	2203      	movs	r2, #3
 80071d8:	4650      	mov	r0, sl
 80071da:	f7f9 f801 	bl	80001e0 <memchr>
 80071de:	b138      	cbz	r0, 80071f0 <_svfiprintf_r+0x150>
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	eba0 000a 	sub.w	r0, r0, sl
 80071e6:	2240      	movs	r2, #64	; 0x40
 80071e8:	4082      	lsls	r2, r0
 80071ea:	4313      	orrs	r3, r2
 80071ec:	3401      	adds	r4, #1
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	4825      	ldr	r0, [pc, #148]	; (800728c <_svfiprintf_r+0x1ec>)
 80071f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071fa:	2206      	movs	r2, #6
 80071fc:	f7f8 fff0 	bl	80001e0 <memchr>
 8007200:	2800      	cmp	r0, #0
 8007202:	d038      	beq.n	8007276 <_svfiprintf_r+0x1d6>
 8007204:	4b22      	ldr	r3, [pc, #136]	; (8007290 <_svfiprintf_r+0x1f0>)
 8007206:	bb1b      	cbnz	r3, 8007250 <_svfiprintf_r+0x1b0>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	3307      	adds	r3, #7
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	3308      	adds	r3, #8
 8007212:	9303      	str	r3, [sp, #12]
 8007214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007216:	4433      	add	r3, r6
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	e768      	b.n	80070ee <_svfiprintf_r+0x4e>
 800721c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007220:	460c      	mov	r4, r1
 8007222:	2001      	movs	r0, #1
 8007224:	e7a6      	b.n	8007174 <_svfiprintf_r+0xd4>
 8007226:	2300      	movs	r3, #0
 8007228:	3401      	adds	r4, #1
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	4619      	mov	r1, r3
 800722e:	f04f 0c0a 	mov.w	ip, #10
 8007232:	4620      	mov	r0, r4
 8007234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007238:	3a30      	subs	r2, #48	; 0x30
 800723a:	2a09      	cmp	r2, #9
 800723c:	d903      	bls.n	8007246 <_svfiprintf_r+0x1a6>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0c6      	beq.n	80071d0 <_svfiprintf_r+0x130>
 8007242:	9105      	str	r1, [sp, #20]
 8007244:	e7c4      	b.n	80071d0 <_svfiprintf_r+0x130>
 8007246:	fb0c 2101 	mla	r1, ip, r1, r2
 800724a:	4604      	mov	r4, r0
 800724c:	2301      	movs	r3, #1
 800724e:	e7f0      	b.n	8007232 <_svfiprintf_r+0x192>
 8007250:	ab03      	add	r3, sp, #12
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	462a      	mov	r2, r5
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <_svfiprintf_r+0x1f4>)
 8007258:	a904      	add	r1, sp, #16
 800725a:	4638      	mov	r0, r7
 800725c:	f3af 8000 	nop.w
 8007260:	1c42      	adds	r2, r0, #1
 8007262:	4606      	mov	r6, r0
 8007264:	d1d6      	bne.n	8007214 <_svfiprintf_r+0x174>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	065b      	lsls	r3, r3, #25
 800726a:	f53f af2d 	bmi.w	80070c8 <_svfiprintf_r+0x28>
 800726e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007270:	b01d      	add	sp, #116	; 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	ab03      	add	r3, sp, #12
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	462a      	mov	r2, r5
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <_svfiprintf_r+0x1f4>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	4638      	mov	r0, r7
 8007282:	f000 fa4b 	bl	800771c <_printf_i>
 8007286:	e7eb      	b.n	8007260 <_svfiprintf_r+0x1c0>
 8007288:	08008021 	.word	0x08008021
 800728c:	0800802b 	.word	0x0800802b
 8007290:	00000000 	.word	0x00000000
 8007294:	08006fed 	.word	0x08006fed
 8007298:	08008027 	.word	0x08008027

0800729c <_sungetc_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	1c4b      	adds	r3, r1, #1
 80072a0:	4614      	mov	r4, r2
 80072a2:	d103      	bne.n	80072ac <_sungetc_r+0x10>
 80072a4:	f04f 35ff 	mov.w	r5, #4294967295
 80072a8:	4628      	mov	r0, r5
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	8993      	ldrh	r3, [r2, #12]
 80072ae:	f023 0320 	bic.w	r3, r3, #32
 80072b2:	8193      	strh	r3, [r2, #12]
 80072b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072b6:	6852      	ldr	r2, [r2, #4]
 80072b8:	b2cd      	uxtb	r5, r1
 80072ba:	b18b      	cbz	r3, 80072e0 <_sungetc_r+0x44>
 80072bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072be:	4293      	cmp	r3, r2
 80072c0:	dd08      	ble.n	80072d4 <_sungetc_r+0x38>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	1e5a      	subs	r2, r3, #1
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	3301      	adds	r3, #1
 80072d0:	6063      	str	r3, [r4, #4]
 80072d2:	e7e9      	b.n	80072a8 <_sungetc_r+0xc>
 80072d4:	4621      	mov	r1, r4
 80072d6:	f000 fcca 	bl	8007c6e <__submore>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d0f1      	beq.n	80072c2 <_sungetc_r+0x26>
 80072de:	e7e1      	b.n	80072a4 <_sungetc_r+0x8>
 80072e0:	6921      	ldr	r1, [r4, #16]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	b151      	cbz	r1, 80072fc <_sungetc_r+0x60>
 80072e6:	4299      	cmp	r1, r3
 80072e8:	d208      	bcs.n	80072fc <_sungetc_r+0x60>
 80072ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80072ee:	42a9      	cmp	r1, r5
 80072f0:	d104      	bne.n	80072fc <_sungetc_r+0x60>
 80072f2:	3b01      	subs	r3, #1
 80072f4:	3201      	adds	r2, #1
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	6062      	str	r2, [r4, #4]
 80072fa:	e7d5      	b.n	80072a8 <_sungetc_r+0xc>
 80072fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007304:	6363      	str	r3, [r4, #52]	; 0x34
 8007306:	2303      	movs	r3, #3
 8007308:	63a3      	str	r3, [r4, #56]	; 0x38
 800730a:	4623      	mov	r3, r4
 800730c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	2301      	movs	r3, #1
 8007314:	e7dc      	b.n	80072d0 <_sungetc_r+0x34>

08007316 <__ssrefill_r>:
 8007316:	b510      	push	{r4, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800731c:	b169      	cbz	r1, 800733a <__ssrefill_r+0x24>
 800731e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007322:	4299      	cmp	r1, r3
 8007324:	d001      	beq.n	800732a <__ssrefill_r+0x14>
 8007326:	f7ff fd69 	bl	8006dfc <_free_r>
 800732a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	2000      	movs	r0, #0
 8007330:	6360      	str	r0, [r4, #52]	; 0x34
 8007332:	b113      	cbz	r3, 800733a <__ssrefill_r+0x24>
 8007334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd10      	pop	{r4, pc}
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f043 0320 	orr.w	r3, r3, #32
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	e7f3      	b.n	8007338 <__ssrefill_r+0x22>

08007350 <__ssvfiscanf_r>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800735a:	2100      	movs	r1, #0
 800735c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007360:	49a6      	ldr	r1, [pc, #664]	; (80075fc <__ssvfiscanf_r+0x2ac>)
 8007362:	91a0      	str	r1, [sp, #640]	; 0x280
 8007364:	f10d 0804 	add.w	r8, sp, #4
 8007368:	49a5      	ldr	r1, [pc, #660]	; (8007600 <__ssvfiscanf_r+0x2b0>)
 800736a:	4fa6      	ldr	r7, [pc, #664]	; (8007604 <__ssvfiscanf_r+0x2b4>)
 800736c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007608 <__ssvfiscanf_r+0x2b8>
 8007370:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007374:	4606      	mov	r6, r0
 8007376:	91a1      	str	r1, [sp, #644]	; 0x284
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	7813      	ldrb	r3, [r2, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 815a 	beq.w	8007636 <__ssvfiscanf_r+0x2e6>
 8007382:	5cf9      	ldrb	r1, [r7, r3]
 8007384:	f011 0108 	ands.w	r1, r1, #8
 8007388:	f102 0501 	add.w	r5, r2, #1
 800738c:	d019      	beq.n	80073c2 <__ssvfiscanf_r+0x72>
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dd0f      	ble.n	80073b4 <__ssvfiscanf_r+0x64>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	5cba      	ldrb	r2, [r7, r2]
 800739a:	0712      	lsls	r2, r2, #28
 800739c:	d401      	bmi.n	80073a2 <__ssvfiscanf_r+0x52>
 800739e:	462a      	mov	r2, r5
 80073a0:	e7eb      	b.n	800737a <__ssvfiscanf_r+0x2a>
 80073a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073a4:	3201      	adds	r2, #1
 80073a6:	9245      	str	r2, [sp, #276]	; 0x114
 80073a8:	6862      	ldr	r2, [r4, #4]
 80073aa:	3301      	adds	r3, #1
 80073ac:	3a01      	subs	r2, #1
 80073ae:	6062      	str	r2, [r4, #4]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	e7ec      	b.n	800738e <__ssvfiscanf_r+0x3e>
 80073b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073b6:	4621      	mov	r1, r4
 80073b8:	4630      	mov	r0, r6
 80073ba:	4798      	blx	r3
 80073bc:	2800      	cmp	r0, #0
 80073be:	d0e9      	beq.n	8007394 <__ssvfiscanf_r+0x44>
 80073c0:	e7ed      	b.n	800739e <__ssvfiscanf_r+0x4e>
 80073c2:	2b25      	cmp	r3, #37	; 0x25
 80073c4:	d012      	beq.n	80073ec <__ssvfiscanf_r+0x9c>
 80073c6:	469a      	mov	sl, r3
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f340 8091 	ble.w	80074f2 <__ssvfiscanf_r+0x1a2>
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	7813      	ldrb	r3, [r2, #0]
 80073d4:	4553      	cmp	r3, sl
 80073d6:	f040 812e 	bne.w	8007636 <__ssvfiscanf_r+0x2e6>
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	3b01      	subs	r3, #1
 80073de:	6063      	str	r3, [r4, #4]
 80073e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073e2:	3201      	adds	r2, #1
 80073e4:	3301      	adds	r3, #1
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	9345      	str	r3, [sp, #276]	; 0x114
 80073ea:	e7d8      	b.n	800739e <__ssvfiscanf_r+0x4e>
 80073ec:	9141      	str	r1, [sp, #260]	; 0x104
 80073ee:	9143      	str	r1, [sp, #268]	; 0x10c
 80073f0:	7853      	ldrb	r3, [r2, #1]
 80073f2:	2b2a      	cmp	r3, #42	; 0x2a
 80073f4:	bf02      	ittt	eq
 80073f6:	2310      	moveq	r3, #16
 80073f8:	1c95      	addeq	r5, r2, #2
 80073fa:	9341      	streq	r3, [sp, #260]	; 0x104
 80073fc:	220a      	movs	r2, #10
 80073fe:	46aa      	mov	sl, r5
 8007400:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007404:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007408:	2b09      	cmp	r3, #9
 800740a:	d91c      	bls.n	8007446 <__ssvfiscanf_r+0xf6>
 800740c:	487e      	ldr	r0, [pc, #504]	; (8007608 <__ssvfiscanf_r+0x2b8>)
 800740e:	2203      	movs	r2, #3
 8007410:	f7f8 fee6 	bl	80001e0 <memchr>
 8007414:	b138      	cbz	r0, 8007426 <__ssvfiscanf_r+0xd6>
 8007416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007418:	eba0 0009 	sub.w	r0, r0, r9
 800741c:	2301      	movs	r3, #1
 800741e:	4083      	lsls	r3, r0
 8007420:	4313      	orrs	r3, r2
 8007422:	9341      	str	r3, [sp, #260]	; 0x104
 8007424:	4655      	mov	r5, sl
 8007426:	f815 3b01 	ldrb.w	r3, [r5], #1
 800742a:	2b78      	cmp	r3, #120	; 0x78
 800742c:	d806      	bhi.n	800743c <__ssvfiscanf_r+0xec>
 800742e:	2b57      	cmp	r3, #87	; 0x57
 8007430:	d810      	bhi.n	8007454 <__ssvfiscanf_r+0x104>
 8007432:	2b25      	cmp	r3, #37	; 0x25
 8007434:	d0c7      	beq.n	80073c6 <__ssvfiscanf_r+0x76>
 8007436:	d857      	bhi.n	80074e8 <__ssvfiscanf_r+0x198>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d065      	beq.n	8007508 <__ssvfiscanf_r+0x1b8>
 800743c:	2303      	movs	r3, #3
 800743e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007440:	230a      	movs	r3, #10
 8007442:	9342      	str	r3, [sp, #264]	; 0x108
 8007444:	e076      	b.n	8007534 <__ssvfiscanf_r+0x1e4>
 8007446:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007448:	fb02 1103 	mla	r1, r2, r3, r1
 800744c:	3930      	subs	r1, #48	; 0x30
 800744e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007450:	4655      	mov	r5, sl
 8007452:	e7d4      	b.n	80073fe <__ssvfiscanf_r+0xae>
 8007454:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007458:	2a20      	cmp	r2, #32
 800745a:	d8ef      	bhi.n	800743c <__ssvfiscanf_r+0xec>
 800745c:	a101      	add	r1, pc, #4	; (adr r1, 8007464 <__ssvfiscanf_r+0x114>)
 800745e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007517 	.word	0x08007517
 8007468:	0800743d 	.word	0x0800743d
 800746c:	0800743d 	.word	0x0800743d
 8007470:	08007575 	.word	0x08007575
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	0800743d 	.word	0x0800743d
 8007484:	0800743d 	.word	0x0800743d
 8007488:	0800743d 	.word	0x0800743d
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800758b 	.word	0x0800758b
 8007494:	08007571 	.word	0x08007571
 8007498:	080074ef 	.word	0x080074ef
 800749c:	080074ef 	.word	0x080074ef
 80074a0:	080074ef 	.word	0x080074ef
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	0800743d 	.word	0x0800743d
 80074b0:	0800743d 	.word	0x0800743d
 80074b4:	0800743d 	.word	0x0800743d
 80074b8:	0800743d 	.word	0x0800743d
 80074bc:	0800759b 	.word	0x0800759b
 80074c0:	08007569 	.word	0x08007569
 80074c4:	0800750f 	.word	0x0800750f
 80074c8:	0800743d 	.word	0x0800743d
 80074cc:	0800743d 	.word	0x0800743d
 80074d0:	08007597 	.word	0x08007597
 80074d4:	0800743d 	.word	0x0800743d
 80074d8:	08007571 	.word	0x08007571
 80074dc:	0800743d 	.word	0x0800743d
 80074e0:	0800743d 	.word	0x0800743d
 80074e4:	08007517 	.word	0x08007517
 80074e8:	3b45      	subs	r3, #69	; 0x45
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d8a6      	bhi.n	800743c <__ssvfiscanf_r+0xec>
 80074ee:	2305      	movs	r3, #5
 80074f0:	e01f      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 80074f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074f4:	4621      	mov	r1, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	4798      	blx	r3
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f af68 	beq.w	80073d0 <__ssvfiscanf_r+0x80>
 8007500:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007502:	2800      	cmp	r0, #0
 8007504:	f040 808d 	bne.w	8007622 <__ssvfiscanf_r+0x2d2>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e08f      	b.n	800762e <__ssvfiscanf_r+0x2de>
 800750e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007510:	f042 0220 	orr.w	r2, r2, #32
 8007514:	9241      	str	r2, [sp, #260]	; 0x104
 8007516:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751c:	9241      	str	r2, [sp, #260]	; 0x104
 800751e:	2210      	movs	r2, #16
 8007520:	2b6f      	cmp	r3, #111	; 0x6f
 8007522:	9242      	str	r2, [sp, #264]	; 0x108
 8007524:	bf34      	ite	cc
 8007526:	2303      	movcc	r3, #3
 8007528:	2304      	movcs	r3, #4
 800752a:	e002      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 800752c:	2300      	movs	r3, #0
 800752e:	9342      	str	r3, [sp, #264]	; 0x108
 8007530:	2303      	movs	r3, #3
 8007532:	9347      	str	r3, [sp, #284]	; 0x11c
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd3d      	ble.n	80075b6 <__ssvfiscanf_r+0x266>
 800753a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800753c:	0659      	lsls	r1, r3, #25
 800753e:	d404      	bmi.n	800754a <__ssvfiscanf_r+0x1fa>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	5cba      	ldrb	r2, [r7, r2]
 8007546:	0712      	lsls	r2, r2, #28
 8007548:	d43c      	bmi.n	80075c4 <__ssvfiscanf_r+0x274>
 800754a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800754c:	2b02      	cmp	r3, #2
 800754e:	dc4b      	bgt.n	80075e8 <__ssvfiscanf_r+0x298>
 8007550:	466b      	mov	r3, sp
 8007552:	4622      	mov	r2, r4
 8007554:	a941      	add	r1, sp, #260	; 0x104
 8007556:	4630      	mov	r0, r6
 8007558:	f000 fa02 	bl	8007960 <_scanf_chars>
 800755c:	2801      	cmp	r0, #1
 800755e:	d06a      	beq.n	8007636 <__ssvfiscanf_r+0x2e6>
 8007560:	2802      	cmp	r0, #2
 8007562:	f47f af1c 	bne.w	800739e <__ssvfiscanf_r+0x4e>
 8007566:	e7cb      	b.n	8007500 <__ssvfiscanf_r+0x1b0>
 8007568:	2308      	movs	r3, #8
 800756a:	9342      	str	r3, [sp, #264]	; 0x108
 800756c:	2304      	movs	r3, #4
 800756e:	e7e0      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 8007570:	220a      	movs	r2, #10
 8007572:	e7d5      	b.n	8007520 <__ssvfiscanf_r+0x1d0>
 8007574:	4629      	mov	r1, r5
 8007576:	4640      	mov	r0, r8
 8007578:	f000 fb40 	bl	8007bfc <__sccl>
 800757c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800757e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007582:	9341      	str	r3, [sp, #260]	; 0x104
 8007584:	4605      	mov	r5, r0
 8007586:	2301      	movs	r3, #1
 8007588:	e7d3      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 800758a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800758c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007590:	9341      	str	r3, [sp, #260]	; 0x104
 8007592:	2300      	movs	r3, #0
 8007594:	e7cd      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 8007596:	2302      	movs	r3, #2
 8007598:	e7cb      	b.n	8007532 <__ssvfiscanf_r+0x1e2>
 800759a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800759c:	06c3      	lsls	r3, r0, #27
 800759e:	f53f aefe 	bmi.w	800739e <__ssvfiscanf_r+0x4e>
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075a6:	1d19      	adds	r1, r3, #4
 80075a8:	9100      	str	r1, [sp, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	07c0      	lsls	r0, r0, #31
 80075ae:	bf4c      	ite	mi
 80075b0:	801a      	strhmi	r2, [r3, #0]
 80075b2:	601a      	strpl	r2, [r3, #0]
 80075b4:	e6f3      	b.n	800739e <__ssvfiscanf_r+0x4e>
 80075b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075b8:	4621      	mov	r1, r4
 80075ba:	4630      	mov	r0, r6
 80075bc:	4798      	blx	r3
 80075be:	2800      	cmp	r0, #0
 80075c0:	d0bb      	beq.n	800753a <__ssvfiscanf_r+0x1ea>
 80075c2:	e79d      	b.n	8007500 <__ssvfiscanf_r+0x1b0>
 80075c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075c6:	3201      	adds	r2, #1
 80075c8:	9245      	str	r2, [sp, #276]	; 0x114
 80075ca:	6862      	ldr	r2, [r4, #4]
 80075cc:	3a01      	subs	r2, #1
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	6062      	str	r2, [r4, #4]
 80075d2:	dd02      	ble.n	80075da <__ssvfiscanf_r+0x28a>
 80075d4:	3301      	adds	r3, #1
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	e7b2      	b.n	8007540 <__ssvfiscanf_r+0x1f0>
 80075da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075dc:	4621      	mov	r1, r4
 80075de:	4630      	mov	r0, r6
 80075e0:	4798      	blx	r3
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0ac      	beq.n	8007540 <__ssvfiscanf_r+0x1f0>
 80075e6:	e78b      	b.n	8007500 <__ssvfiscanf_r+0x1b0>
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	dc0f      	bgt.n	800760c <__ssvfiscanf_r+0x2bc>
 80075ec:	466b      	mov	r3, sp
 80075ee:	4622      	mov	r2, r4
 80075f0:	a941      	add	r1, sp, #260	; 0x104
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fa0e 	bl	8007a14 <_scanf_i>
 80075f8:	e7b0      	b.n	800755c <__ssvfiscanf_r+0x20c>
 80075fa:	bf00      	nop
 80075fc:	0800729d 	.word	0x0800729d
 8007600:	08007317 	.word	0x08007317
 8007604:	08007f21 	.word	0x08007f21
 8007608:	08008027 	.word	0x08008027
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <__ssvfiscanf_r+0x2ec>)
 800760e:	2b00      	cmp	r3, #0
 8007610:	f43f aec5 	beq.w	800739e <__ssvfiscanf_r+0x4e>
 8007614:	466b      	mov	r3, sp
 8007616:	4622      	mov	r2, r4
 8007618:	a941      	add	r1, sp, #260	; 0x104
 800761a:	4630      	mov	r0, r6
 800761c:	f3af 8000 	nop.w
 8007620:	e79c      	b.n	800755c <__ssvfiscanf_r+0x20c>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007628:	bf18      	it	ne
 800762a:	f04f 30ff 	movne.w	r0, #4294967295
 800762e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007638:	e7f9      	b.n	800762e <__ssvfiscanf_r+0x2de>
 800763a:	bf00      	nop
 800763c:	00000000 	.word	0x00000000

08007640 <_printf_common>:
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	4616      	mov	r6, r2
 8007646:	4699      	mov	r9, r3
 8007648:	688a      	ldr	r2, [r1, #8]
 800764a:	690b      	ldr	r3, [r1, #16]
 800764c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007650:	4293      	cmp	r3, r2
 8007652:	bfb8      	it	lt
 8007654:	4613      	movlt	r3, r2
 8007656:	6033      	str	r3, [r6, #0]
 8007658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800765c:	4607      	mov	r7, r0
 800765e:	460c      	mov	r4, r1
 8007660:	b10a      	cbz	r2, 8007666 <_printf_common+0x26>
 8007662:	3301      	adds	r3, #1
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	0699      	lsls	r1, r3, #26
 800766a:	bf42      	ittt	mi
 800766c:	6833      	ldrmi	r3, [r6, #0]
 800766e:	3302      	addmi	r3, #2
 8007670:	6033      	strmi	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	f015 0506 	ands.w	r5, r5, #6
 8007678:	d106      	bne.n	8007688 <_printf_common+0x48>
 800767a:	f104 0a19 	add.w	sl, r4, #25
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	6832      	ldr	r2, [r6, #0]
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	42ab      	cmp	r3, r5
 8007686:	dc26      	bgt.n	80076d6 <_printf_common+0x96>
 8007688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800768c:	1e13      	subs	r3, r2, #0
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	bf18      	it	ne
 8007692:	2301      	movne	r3, #1
 8007694:	0692      	lsls	r2, r2, #26
 8007696:	d42b      	bmi.n	80076f0 <_printf_common+0xb0>
 8007698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800769c:	4649      	mov	r1, r9
 800769e:	4638      	mov	r0, r7
 80076a0:	47c0      	blx	r8
 80076a2:	3001      	adds	r0, #1
 80076a4:	d01e      	beq.n	80076e4 <_printf_common+0xa4>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	6922      	ldr	r2, [r4, #16]
 80076aa:	f003 0306 	and.w	r3, r3, #6
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	bf02      	ittt	eq
 80076b2:	68e5      	ldreq	r5, [r4, #12]
 80076b4:	6833      	ldreq	r3, [r6, #0]
 80076b6:	1aed      	subeq	r5, r5, r3
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	bf0c      	ite	eq
 80076bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c0:	2500      	movne	r5, #0
 80076c2:	4293      	cmp	r3, r2
 80076c4:	bfc4      	itt	gt
 80076c6:	1a9b      	subgt	r3, r3, r2
 80076c8:	18ed      	addgt	r5, r5, r3
 80076ca:	2600      	movs	r6, #0
 80076cc:	341a      	adds	r4, #26
 80076ce:	42b5      	cmp	r5, r6
 80076d0:	d11a      	bne.n	8007708 <_printf_common+0xc8>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e008      	b.n	80076e8 <_printf_common+0xa8>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4652      	mov	r2, sl
 80076da:	4649      	mov	r1, r9
 80076dc:	4638      	mov	r0, r7
 80076de:	47c0      	blx	r8
 80076e0:	3001      	adds	r0, #1
 80076e2:	d103      	bne.n	80076ec <_printf_common+0xac>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	3501      	adds	r5, #1
 80076ee:	e7c6      	b.n	800767e <_printf_common+0x3e>
 80076f0:	18e1      	adds	r1, r4, r3
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	2030      	movs	r0, #48	; 0x30
 80076f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fa:	4422      	add	r2, r4
 80076fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007704:	3302      	adds	r3, #2
 8007706:	e7c7      	b.n	8007698 <_printf_common+0x58>
 8007708:	2301      	movs	r3, #1
 800770a:	4622      	mov	r2, r4
 800770c:	4649      	mov	r1, r9
 800770e:	4638      	mov	r0, r7
 8007710:	47c0      	blx	r8
 8007712:	3001      	adds	r0, #1
 8007714:	d0e6      	beq.n	80076e4 <_printf_common+0xa4>
 8007716:	3601      	adds	r6, #1
 8007718:	e7d9      	b.n	80076ce <_printf_common+0x8e>
	...

0800771c <_printf_i>:
 800771c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	7e0f      	ldrb	r7, [r1, #24]
 8007722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007724:	2f78      	cmp	r7, #120	; 0x78
 8007726:	4691      	mov	r9, r2
 8007728:	4680      	mov	r8, r0
 800772a:	460c      	mov	r4, r1
 800772c:	469a      	mov	sl, r3
 800772e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007732:	d807      	bhi.n	8007744 <_printf_i+0x28>
 8007734:	2f62      	cmp	r7, #98	; 0x62
 8007736:	d80a      	bhi.n	800774e <_printf_i+0x32>
 8007738:	2f00      	cmp	r7, #0
 800773a:	f000 80d4 	beq.w	80078e6 <_printf_i+0x1ca>
 800773e:	2f58      	cmp	r7, #88	; 0x58
 8007740:	f000 80c0 	beq.w	80078c4 <_printf_i+0x1a8>
 8007744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800774c:	e03a      	b.n	80077c4 <_printf_i+0xa8>
 800774e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007752:	2b15      	cmp	r3, #21
 8007754:	d8f6      	bhi.n	8007744 <_printf_i+0x28>
 8007756:	a101      	add	r1, pc, #4	; (adr r1, 800775c <_printf_i+0x40>)
 8007758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800775c:	080077b5 	.word	0x080077b5
 8007760:	080077c9 	.word	0x080077c9
 8007764:	08007745 	.word	0x08007745
 8007768:	08007745 	.word	0x08007745
 800776c:	08007745 	.word	0x08007745
 8007770:	08007745 	.word	0x08007745
 8007774:	080077c9 	.word	0x080077c9
 8007778:	08007745 	.word	0x08007745
 800777c:	08007745 	.word	0x08007745
 8007780:	08007745 	.word	0x08007745
 8007784:	08007745 	.word	0x08007745
 8007788:	080078cd 	.word	0x080078cd
 800778c:	080077f5 	.word	0x080077f5
 8007790:	08007887 	.word	0x08007887
 8007794:	08007745 	.word	0x08007745
 8007798:	08007745 	.word	0x08007745
 800779c:	080078ef 	.word	0x080078ef
 80077a0:	08007745 	.word	0x08007745
 80077a4:	080077f5 	.word	0x080077f5
 80077a8:	08007745 	.word	0x08007745
 80077ac:	08007745 	.word	0x08007745
 80077b0:	0800788f 	.word	0x0800788f
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c4:	2301      	movs	r3, #1
 80077c6:	e09f      	b.n	8007908 <_printf_i+0x1ec>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	0607      	lsls	r7, r0, #24
 80077ce:	f103 0104 	add.w	r1, r3, #4
 80077d2:	6029      	str	r1, [r5, #0]
 80077d4:	d501      	bpl.n	80077da <_printf_i+0xbe>
 80077d6:	681e      	ldr	r6, [r3, #0]
 80077d8:	e003      	b.n	80077e2 <_printf_i+0xc6>
 80077da:	0646      	lsls	r6, r0, #25
 80077dc:	d5fb      	bpl.n	80077d6 <_printf_i+0xba>
 80077de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077e2:	2e00      	cmp	r6, #0
 80077e4:	da03      	bge.n	80077ee <_printf_i+0xd2>
 80077e6:	232d      	movs	r3, #45	; 0x2d
 80077e8:	4276      	negs	r6, r6
 80077ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ee:	485a      	ldr	r0, [pc, #360]	; (8007958 <_printf_i+0x23c>)
 80077f0:	230a      	movs	r3, #10
 80077f2:	e012      	b.n	800781a <_printf_i+0xfe>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	1d19      	adds	r1, r3, #4
 80077fa:	6029      	str	r1, [r5, #0]
 80077fc:	0605      	lsls	r5, r0, #24
 80077fe:	d501      	bpl.n	8007804 <_printf_i+0xe8>
 8007800:	681e      	ldr	r6, [r3, #0]
 8007802:	e002      	b.n	800780a <_printf_i+0xee>
 8007804:	0641      	lsls	r1, r0, #25
 8007806:	d5fb      	bpl.n	8007800 <_printf_i+0xe4>
 8007808:	881e      	ldrh	r6, [r3, #0]
 800780a:	4853      	ldr	r0, [pc, #332]	; (8007958 <_printf_i+0x23c>)
 800780c:	2f6f      	cmp	r7, #111	; 0x6f
 800780e:	bf0c      	ite	eq
 8007810:	2308      	moveq	r3, #8
 8007812:	230a      	movne	r3, #10
 8007814:	2100      	movs	r1, #0
 8007816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781a:	6865      	ldr	r5, [r4, #4]
 800781c:	60a5      	str	r5, [r4, #8]
 800781e:	2d00      	cmp	r5, #0
 8007820:	bfa2      	ittt	ge
 8007822:	6821      	ldrge	r1, [r4, #0]
 8007824:	f021 0104 	bicge.w	r1, r1, #4
 8007828:	6021      	strge	r1, [r4, #0]
 800782a:	b90e      	cbnz	r6, 8007830 <_printf_i+0x114>
 800782c:	2d00      	cmp	r5, #0
 800782e:	d04b      	beq.n	80078c8 <_printf_i+0x1ac>
 8007830:	4615      	mov	r5, r2
 8007832:	fbb6 f1f3 	udiv	r1, r6, r3
 8007836:	fb03 6711 	mls	r7, r3, r1, r6
 800783a:	5dc7      	ldrb	r7, [r0, r7]
 800783c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007840:	4637      	mov	r7, r6
 8007842:	42bb      	cmp	r3, r7
 8007844:	460e      	mov	r6, r1
 8007846:	d9f4      	bls.n	8007832 <_printf_i+0x116>
 8007848:	2b08      	cmp	r3, #8
 800784a:	d10b      	bne.n	8007864 <_printf_i+0x148>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	07de      	lsls	r6, r3, #31
 8007850:	d508      	bpl.n	8007864 <_printf_i+0x148>
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6861      	ldr	r1, [r4, #4]
 8007856:	4299      	cmp	r1, r3
 8007858:	bfde      	ittt	le
 800785a:	2330      	movle	r3, #48	; 0x30
 800785c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007864:	1b52      	subs	r2, r2, r5
 8007866:	6122      	str	r2, [r4, #16]
 8007868:	f8cd a000 	str.w	sl, [sp]
 800786c:	464b      	mov	r3, r9
 800786e:	aa03      	add	r2, sp, #12
 8007870:	4621      	mov	r1, r4
 8007872:	4640      	mov	r0, r8
 8007874:	f7ff fee4 	bl	8007640 <_printf_common>
 8007878:	3001      	adds	r0, #1
 800787a:	d14a      	bne.n	8007912 <_printf_i+0x1f6>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	b004      	add	sp, #16
 8007882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	f043 0320 	orr.w	r3, r3, #32
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	4833      	ldr	r0, [pc, #204]	; (800795c <_printf_i+0x240>)
 8007890:	2778      	movs	r7, #120	; 0x78
 8007892:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	6829      	ldr	r1, [r5, #0]
 800789a:	061f      	lsls	r7, r3, #24
 800789c:	f851 6b04 	ldr.w	r6, [r1], #4
 80078a0:	d402      	bmi.n	80078a8 <_printf_i+0x18c>
 80078a2:	065f      	lsls	r7, r3, #25
 80078a4:	bf48      	it	mi
 80078a6:	b2b6      	uxthmi	r6, r6
 80078a8:	07df      	lsls	r7, r3, #31
 80078aa:	bf48      	it	mi
 80078ac:	f043 0320 	orrmi.w	r3, r3, #32
 80078b0:	6029      	str	r1, [r5, #0]
 80078b2:	bf48      	it	mi
 80078b4:	6023      	strmi	r3, [r4, #0]
 80078b6:	b91e      	cbnz	r6, 80078c0 <_printf_i+0x1a4>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	f023 0320 	bic.w	r3, r3, #32
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	2310      	movs	r3, #16
 80078c2:	e7a7      	b.n	8007814 <_printf_i+0xf8>
 80078c4:	4824      	ldr	r0, [pc, #144]	; (8007958 <_printf_i+0x23c>)
 80078c6:	e7e4      	b.n	8007892 <_printf_i+0x176>
 80078c8:	4615      	mov	r5, r2
 80078ca:	e7bd      	b.n	8007848 <_printf_i+0x12c>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	6826      	ldr	r6, [r4, #0]
 80078d0:	6961      	ldr	r1, [r4, #20]
 80078d2:	1d18      	adds	r0, r3, #4
 80078d4:	6028      	str	r0, [r5, #0]
 80078d6:	0635      	lsls	r5, r6, #24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0x1c4>
 80078dc:	6019      	str	r1, [r3, #0]
 80078de:	e002      	b.n	80078e6 <_printf_i+0x1ca>
 80078e0:	0670      	lsls	r0, r6, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0x1c0>
 80078e4:	8019      	strh	r1, [r3, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	4615      	mov	r5, r2
 80078ec:	e7bc      	b.n	8007868 <_printf_i+0x14c>
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	1d1a      	adds	r2, r3, #4
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	681d      	ldr	r5, [r3, #0]
 80078f6:	6862      	ldr	r2, [r4, #4]
 80078f8:	2100      	movs	r1, #0
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7f8 fc70 	bl	80001e0 <memchr>
 8007900:	b108      	cbz	r0, 8007906 <_printf_i+0x1ea>
 8007902:	1b40      	subs	r0, r0, r5
 8007904:	6060      	str	r0, [r4, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	2300      	movs	r3, #0
 800790c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007910:	e7aa      	b.n	8007868 <_printf_i+0x14c>
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	462a      	mov	r2, r5
 8007916:	4649      	mov	r1, r9
 8007918:	4640      	mov	r0, r8
 800791a:	47d0      	blx	sl
 800791c:	3001      	adds	r0, #1
 800791e:	d0ad      	beq.n	800787c <_printf_i+0x160>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	079b      	lsls	r3, r3, #30
 8007924:	d413      	bmi.n	800794e <_printf_i+0x232>
 8007926:	68e0      	ldr	r0, [r4, #12]
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	4298      	cmp	r0, r3
 800792c:	bfb8      	it	lt
 800792e:	4618      	movlt	r0, r3
 8007930:	e7a6      	b.n	8007880 <_printf_i+0x164>
 8007932:	2301      	movs	r3, #1
 8007934:	4632      	mov	r2, r6
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	47d0      	blx	sl
 800793c:	3001      	adds	r0, #1
 800793e:	d09d      	beq.n	800787c <_printf_i+0x160>
 8007940:	3501      	adds	r5, #1
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	9903      	ldr	r1, [sp, #12]
 8007946:	1a5b      	subs	r3, r3, r1
 8007948:	42ab      	cmp	r3, r5
 800794a:	dcf2      	bgt.n	8007932 <_printf_i+0x216>
 800794c:	e7eb      	b.n	8007926 <_printf_i+0x20a>
 800794e:	2500      	movs	r5, #0
 8007950:	f104 0619 	add.w	r6, r4, #25
 8007954:	e7f5      	b.n	8007942 <_printf_i+0x226>
 8007956:	bf00      	nop
 8007958:	08008032 	.word	0x08008032
 800795c:	08008043 	.word	0x08008043

08007960 <_scanf_chars>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4615      	mov	r5, r2
 8007966:	688a      	ldr	r2, [r1, #8]
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	b932      	cbnz	r2, 800797c <_scanf_chars+0x1c>
 800796e:	698a      	ldr	r2, [r1, #24]
 8007970:	2a00      	cmp	r2, #0
 8007972:	bf0c      	ite	eq
 8007974:	2201      	moveq	r2, #1
 8007976:	f04f 32ff 	movne.w	r2, #4294967295
 800797a:	608a      	str	r2, [r1, #8]
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007a10 <_scanf_chars+0xb0>
 8007982:	06d1      	lsls	r1, r2, #27
 8007984:	bf5f      	itttt	pl
 8007986:	681a      	ldrpl	r2, [r3, #0]
 8007988:	1d11      	addpl	r1, r2, #4
 800798a:	6019      	strpl	r1, [r3, #0]
 800798c:	6816      	ldrpl	r6, [r2, #0]
 800798e:	2700      	movs	r7, #0
 8007990:	69a0      	ldr	r0, [r4, #24]
 8007992:	b188      	cbz	r0, 80079b8 <_scanf_chars+0x58>
 8007994:	2801      	cmp	r0, #1
 8007996:	d107      	bne.n	80079a8 <_scanf_chars+0x48>
 8007998:	682a      	ldr	r2, [r5, #0]
 800799a:	7811      	ldrb	r1, [r2, #0]
 800799c:	6962      	ldr	r2, [r4, #20]
 800799e:	5c52      	ldrb	r2, [r2, r1]
 80079a0:	b952      	cbnz	r2, 80079b8 <_scanf_chars+0x58>
 80079a2:	2f00      	cmp	r7, #0
 80079a4:	d031      	beq.n	8007a0a <_scanf_chars+0xaa>
 80079a6:	e022      	b.n	80079ee <_scanf_chars+0x8e>
 80079a8:	2802      	cmp	r0, #2
 80079aa:	d120      	bne.n	80079ee <_scanf_chars+0x8e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80079b4:	071b      	lsls	r3, r3, #28
 80079b6:	d41a      	bmi.n	80079ee <_scanf_chars+0x8e>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	06da      	lsls	r2, r3, #27
 80079bc:	bf5e      	ittt	pl
 80079be:	682b      	ldrpl	r3, [r5, #0]
 80079c0:	781b      	ldrbpl	r3, [r3, #0]
 80079c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80079c6:	682a      	ldr	r2, [r5, #0]
 80079c8:	686b      	ldr	r3, [r5, #4]
 80079ca:	3201      	adds	r2, #1
 80079cc:	602a      	str	r2, [r5, #0]
 80079ce:	68a2      	ldr	r2, [r4, #8]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	3a01      	subs	r2, #1
 80079d4:	606b      	str	r3, [r5, #4]
 80079d6:	3701      	adds	r7, #1
 80079d8:	60a2      	str	r2, [r4, #8]
 80079da:	b142      	cbz	r2, 80079ee <_scanf_chars+0x8e>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dcd7      	bgt.n	8007990 <_scanf_chars+0x30>
 80079e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079e4:	4629      	mov	r1, r5
 80079e6:	4640      	mov	r0, r8
 80079e8:	4798      	blx	r3
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d0d0      	beq.n	8007990 <_scanf_chars+0x30>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f013 0310 	ands.w	r3, r3, #16
 80079f4:	d105      	bne.n	8007a02 <_scanf_chars+0xa2>
 80079f6:	68e2      	ldr	r2, [r4, #12]
 80079f8:	3201      	adds	r2, #1
 80079fa:	60e2      	str	r2, [r4, #12]
 80079fc:	69a2      	ldr	r2, [r4, #24]
 80079fe:	b102      	cbz	r2, 8007a02 <_scanf_chars+0xa2>
 8007a00:	7033      	strb	r3, [r6, #0]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	443b      	add	r3, r7
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	bf00      	nop
 8007a10:	08007f21 	.word	0x08007f21

08007a14 <_scanf_i>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	4698      	mov	r8, r3
 8007a1a:	4b74      	ldr	r3, [pc, #464]	; (8007bec <_scanf_i+0x1d8>)
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	4682      	mov	sl, r0
 8007a20:	4616      	mov	r6, r2
 8007a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a26:	b087      	sub	sp, #28
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007a2e:	4b70      	ldr	r3, [pc, #448]	; (8007bf0 <_scanf_i+0x1dc>)
 8007a30:	69a1      	ldr	r1, [r4, #24]
 8007a32:	4a70      	ldr	r2, [pc, #448]	; (8007bf4 <_scanf_i+0x1e0>)
 8007a34:	2903      	cmp	r1, #3
 8007a36:	bf18      	it	ne
 8007a38:	461a      	movne	r2, r3
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a44:	bf88      	it	hi
 8007a46:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a4a:	4627      	mov	r7, r4
 8007a4c:	bf82      	ittt	hi
 8007a4e:	eb03 0905 	addhi.w	r9, r3, r5
 8007a52:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a56:	60a3      	strhi	r3, [r4, #8]
 8007a58:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007a5c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007a60:	bf98      	it	ls
 8007a62:	f04f 0900 	movls.w	r9, #0
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	463d      	mov	r5, r7
 8007a6a:	f04f 0b00 	mov.w	fp, #0
 8007a6e:	6831      	ldr	r1, [r6, #0]
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	7809      	ldrb	r1, [r1, #0]
 8007a74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f7f8 fbb1 	bl	80001e0 <memchr>
 8007a7e:	b328      	cbz	r0, 8007acc <_scanf_i+0xb8>
 8007a80:	f1bb 0f01 	cmp.w	fp, #1
 8007a84:	d159      	bne.n	8007b3a <_scanf_i+0x126>
 8007a86:	6862      	ldr	r2, [r4, #4]
 8007a88:	b92a      	cbnz	r2, 8007a96 <_scanf_i+0x82>
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	6022      	str	r2, [r4, #0]
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007a9c:	6022      	str	r2, [r4, #0]
 8007a9e:	68a2      	ldr	r2, [r4, #8]
 8007aa0:	1e51      	subs	r1, r2, #1
 8007aa2:	60a1      	str	r1, [r4, #8]
 8007aa4:	b192      	cbz	r2, 8007acc <_scanf_i+0xb8>
 8007aa6:	6832      	ldr	r2, [r6, #0]
 8007aa8:	1c51      	adds	r1, r2, #1
 8007aaa:	6031      	str	r1, [r6, #0]
 8007aac:	7812      	ldrb	r2, [r2, #0]
 8007aae:	f805 2b01 	strb.w	r2, [r5], #1
 8007ab2:	6872      	ldr	r2, [r6, #4]
 8007ab4:	3a01      	subs	r2, #1
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	6072      	str	r2, [r6, #4]
 8007aba:	dc07      	bgt.n	8007acc <_scanf_i+0xb8>
 8007abc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	4790      	blx	r2
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f040 8085 	bne.w	8007bd6 <_scanf_i+0x1c2>
 8007acc:	f10b 0b01 	add.w	fp, fp, #1
 8007ad0:	f1bb 0f03 	cmp.w	fp, #3
 8007ad4:	d1cb      	bne.n	8007a6e <_scanf_i+0x5a>
 8007ad6:	6863      	ldr	r3, [r4, #4]
 8007ad8:	b90b      	cbnz	r3, 8007ade <_scanf_i+0xca>
 8007ada:	230a      	movs	r3, #10
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	4945      	ldr	r1, [pc, #276]	; (8007bf8 <_scanf_i+0x1e4>)
 8007ae2:	6960      	ldr	r0, [r4, #20]
 8007ae4:	1ac9      	subs	r1, r1, r3
 8007ae6:	f000 f889 	bl	8007bfc <__sccl>
 8007aea:	f04f 0b00 	mov.w	fp, #0
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d03d      	beq.n	8007b72 <_scanf_i+0x15e>
 8007af6:	6831      	ldr	r1, [r6, #0]
 8007af8:	6960      	ldr	r0, [r4, #20]
 8007afa:	f891 c000 	ldrb.w	ip, [r1]
 8007afe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d035      	beq.n	8007b72 <_scanf_i+0x15e>
 8007b06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007b0a:	d124      	bne.n	8007b56 <_scanf_i+0x142>
 8007b0c:	0510      	lsls	r0, r2, #20
 8007b0e:	d522      	bpl.n	8007b56 <_scanf_i+0x142>
 8007b10:	f10b 0b01 	add.w	fp, fp, #1
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	d003      	beq.n	8007b22 <_scanf_i+0x10e>
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b20:	60a3      	str	r3, [r4, #8]
 8007b22:	6873      	ldr	r3, [r6, #4]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	6073      	str	r3, [r6, #4]
 8007b2a:	dd1b      	ble.n	8007b64 <_scanf_i+0x150>
 8007b2c:	6833      	ldr	r3, [r6, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	6033      	str	r3, [r6, #0]
 8007b32:	68a3      	ldr	r3, [r4, #8]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	60a3      	str	r3, [r4, #8]
 8007b38:	e7d9      	b.n	8007aee <_scanf_i+0xda>
 8007b3a:	f1bb 0f02 	cmp.w	fp, #2
 8007b3e:	d1ae      	bne.n	8007a9e <_scanf_i+0x8a>
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007b46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007b4a:	d1bf      	bne.n	8007acc <_scanf_i+0xb8>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b54:	e7a2      	b.n	8007a9c <_scanf_i+0x88>
 8007b56:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007b5a:	6022      	str	r2, [r4, #0]
 8007b5c:	780b      	ldrb	r3, [r1, #0]
 8007b5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007b62:	e7de      	b.n	8007b22 <_scanf_i+0x10e>
 8007b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4798      	blx	r3
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d0df      	beq.n	8007b32 <_scanf_i+0x11e>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	05d9      	lsls	r1, r3, #23
 8007b76:	d50d      	bpl.n	8007b94 <_scanf_i+0x180>
 8007b78:	42bd      	cmp	r5, r7
 8007b7a:	d909      	bls.n	8007b90 <_scanf_i+0x17c>
 8007b7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b84:	4632      	mov	r2, r6
 8007b86:	4650      	mov	r0, sl
 8007b88:	4798      	blx	r3
 8007b8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b8e:	464d      	mov	r5, r9
 8007b90:	42bd      	cmp	r5, r7
 8007b92:	d028      	beq.n	8007be6 <_scanf_i+0x1d2>
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	f012 0210 	ands.w	r2, r2, #16
 8007b9a:	d113      	bne.n	8007bc4 <_scanf_i+0x1b0>
 8007b9c:	702a      	strb	r2, [r5, #0]
 8007b9e:	6863      	ldr	r3, [r4, #4]
 8007ba0:	9e01      	ldr	r6, [sp, #4]
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	47b0      	blx	r6
 8007ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bac:	6821      	ldr	r1, [r4, #0]
 8007bae:	1d1a      	adds	r2, r3, #4
 8007bb0:	f8c8 2000 	str.w	r2, [r8]
 8007bb4:	f011 0f20 	tst.w	r1, #32
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	d00f      	beq.n	8007bdc <_scanf_i+0x1c8>
 8007bbc:	6018      	str	r0, [r3, #0]
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60e3      	str	r3, [r4, #12]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	1bed      	subs	r5, r5, r7
 8007bc8:	445d      	add	r5, fp
 8007bca:	442b      	add	r3, r5
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	2000      	movs	r0, #0
 8007bd0:	b007      	add	sp, #28
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	f04f 0b00 	mov.w	fp, #0
 8007bda:	e7ca      	b.n	8007b72 <_scanf_i+0x15e>
 8007bdc:	07ca      	lsls	r2, r1, #31
 8007bde:	bf4c      	ite	mi
 8007be0:	8018      	strhmi	r0, [r3, #0]
 8007be2:	6018      	strpl	r0, [r3, #0]
 8007be4:	e7eb      	b.n	8007bbe <_scanf_i+0x1aa>
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7f2      	b.n	8007bd0 <_scanf_i+0x1bc>
 8007bea:	bf00      	nop
 8007bec:	08007ef4 	.word	0x08007ef4
 8007bf0:	08007e99 	.word	0x08007e99
 8007bf4:	08006c3d 	.word	0x08006c3d
 8007bf8:	08008064 	.word	0x08008064

08007bfc <__sccl>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	780b      	ldrb	r3, [r1, #0]
 8007c00:	4604      	mov	r4, r0
 8007c02:	2b5e      	cmp	r3, #94	; 0x5e
 8007c04:	bf0b      	itete	eq
 8007c06:	784b      	ldrbeq	r3, [r1, #1]
 8007c08:	1c4a      	addne	r2, r1, #1
 8007c0a:	1c8a      	addeq	r2, r1, #2
 8007c0c:	2100      	movne	r1, #0
 8007c0e:	bf08      	it	eq
 8007c10:	2101      	moveq	r1, #1
 8007c12:	3801      	subs	r0, #1
 8007c14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007c18:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007c1c:	42a8      	cmp	r0, r5
 8007c1e:	d1fb      	bne.n	8007c18 <__sccl+0x1c>
 8007c20:	b90b      	cbnz	r3, 8007c26 <__sccl+0x2a>
 8007c22:	1e50      	subs	r0, r2, #1
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
 8007c26:	f081 0101 	eor.w	r1, r1, #1
 8007c2a:	54e1      	strb	r1, [r4, r3]
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4602      	mov	r2, r0
 8007c30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c34:	2d2d      	cmp	r5, #45	; 0x2d
 8007c36:	d005      	beq.n	8007c44 <__sccl+0x48>
 8007c38:	2d5d      	cmp	r5, #93	; 0x5d
 8007c3a:	d016      	beq.n	8007c6a <__sccl+0x6e>
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	d0f1      	beq.n	8007c24 <__sccl+0x28>
 8007c40:	462b      	mov	r3, r5
 8007c42:	e7f2      	b.n	8007c2a <__sccl+0x2e>
 8007c44:	7846      	ldrb	r6, [r0, #1]
 8007c46:	2e5d      	cmp	r6, #93	; 0x5d
 8007c48:	d0fa      	beq.n	8007c40 <__sccl+0x44>
 8007c4a:	42b3      	cmp	r3, r6
 8007c4c:	dcf8      	bgt.n	8007c40 <__sccl+0x44>
 8007c4e:	3002      	adds	r0, #2
 8007c50:	461a      	mov	r2, r3
 8007c52:	3201      	adds	r2, #1
 8007c54:	4296      	cmp	r6, r2
 8007c56:	54a1      	strb	r1, [r4, r2]
 8007c58:	dcfb      	bgt.n	8007c52 <__sccl+0x56>
 8007c5a:	1af2      	subs	r2, r6, r3
 8007c5c:	3a01      	subs	r2, #1
 8007c5e:	1c5d      	adds	r5, r3, #1
 8007c60:	42b3      	cmp	r3, r6
 8007c62:	bfa8      	it	ge
 8007c64:	2200      	movge	r2, #0
 8007c66:	18ab      	adds	r3, r5, r2
 8007c68:	e7e1      	b.n	8007c2e <__sccl+0x32>
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	e7da      	b.n	8007c24 <__sccl+0x28>

08007c6e <__submore>:
 8007c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d11d      	bne.n	8007cba <__submore+0x4c>
 8007c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c82:	f7ff f927 	bl	8006ed4 <_malloc_r>
 8007c86:	b918      	cbnz	r0, 8007c90 <__submore+0x22>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c94:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c96:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ca4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007ca8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cac:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007cb0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007cb4:	6020      	str	r0, [r4, #0]
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e7e8      	b.n	8007c8c <__submore+0x1e>
 8007cba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007cbc:	0077      	lsls	r7, r6, #1
 8007cbe:	463a      	mov	r2, r7
 8007cc0:	f000 f848 	bl	8007d54 <_realloc_r>
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0de      	beq.n	8007c88 <__submore+0x1a>
 8007cca:	eb00 0806 	add.w	r8, r0, r6
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	f000 f830 	bl	8007d38 <memcpy>
 8007cd8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007cdc:	f8c4 8000 	str.w	r8, [r4]
 8007ce0:	e7e9      	b.n	8007cb6 <__submore+0x48>

08007ce2 <memmove>:
 8007ce2:	4288      	cmp	r0, r1
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	eb01 0402 	add.w	r4, r1, r2
 8007cea:	d902      	bls.n	8007cf2 <memmove+0x10>
 8007cec:	4284      	cmp	r4, r0
 8007cee:	4623      	mov	r3, r4
 8007cf0:	d807      	bhi.n	8007d02 <memmove+0x20>
 8007cf2:	1e43      	subs	r3, r0, #1
 8007cf4:	42a1      	cmp	r1, r4
 8007cf6:	d008      	beq.n	8007d0a <memmove+0x28>
 8007cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d00:	e7f8      	b.n	8007cf4 <memmove+0x12>
 8007d02:	4402      	add	r2, r0
 8007d04:	4601      	mov	r1, r0
 8007d06:	428a      	cmp	r2, r1
 8007d08:	d100      	bne.n	8007d0c <memmove+0x2a>
 8007d0a:	bd10      	pop	{r4, pc}
 8007d0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d14:	e7f7      	b.n	8007d06 <memmove+0x24>
	...

08007d18 <_sbrk_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	; (8007d34 <_sbrk_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fb92 	bl	800144c <_sbrk>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_sbrk_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_sbrk_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200005c4 	.word	0x200005c4

08007d38 <memcpy>:
 8007d38:	440a      	add	r2, r1
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d40:	d100      	bne.n	8007d44 <memcpy+0xc>
 8007d42:	4770      	bx	lr
 8007d44:	b510      	push	{r4, lr}
 8007d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	d1f9      	bne.n	8007d46 <memcpy+0xe>
 8007d52:	bd10      	pop	{r4, pc}

08007d54 <_realloc_r>:
 8007d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	b921      	cbnz	r1, 8007d6a <_realloc_r+0x16>
 8007d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	4611      	mov	r1, r2
 8007d66:	f7ff b8b5 	b.w	8006ed4 <_malloc_r>
 8007d6a:	b92a      	cbnz	r2, 8007d78 <_realloc_r+0x24>
 8007d6c:	f7ff f846 	bl	8006dfc <_free_r>
 8007d70:	4625      	mov	r5, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d78:	f000 f890 	bl	8007e9c <_malloc_usable_size_r>
 8007d7c:	4284      	cmp	r4, r0
 8007d7e:	4607      	mov	r7, r0
 8007d80:	d802      	bhi.n	8007d88 <_realloc_r+0x34>
 8007d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d86:	d812      	bhi.n	8007dae <_realloc_r+0x5a>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff f8a2 	bl	8006ed4 <_malloc_r>
 8007d90:	4605      	mov	r5, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0ed      	beq.n	8007d72 <_realloc_r+0x1e>
 8007d96:	42bc      	cmp	r4, r7
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	bf28      	it	cs
 8007d9e:	463a      	movcs	r2, r7
 8007da0:	f7ff ffca 	bl	8007d38 <memcpy>
 8007da4:	4631      	mov	r1, r6
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff f828 	bl	8006dfc <_free_r>
 8007dac:	e7e1      	b.n	8007d72 <_realloc_r+0x1e>
 8007dae:	4635      	mov	r5, r6
 8007db0:	e7df      	b.n	8007d72 <_realloc_r+0x1e>
	...

08007db4 <_strtoul_l.constprop.0>:
 8007db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007db8:	4f36      	ldr	r7, [pc, #216]	; (8007e94 <_strtoul_l.constprop.0+0xe0>)
 8007dba:	4686      	mov	lr, r0
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dc4:	5d3e      	ldrb	r6, [r7, r4]
 8007dc6:	f016 0608 	ands.w	r6, r6, #8
 8007dca:	d1f8      	bne.n	8007dbe <_strtoul_l.constprop.0+0xa>
 8007dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8007dce:	d130      	bne.n	8007e32 <_strtoul_l.constprop.0+0x7e>
 8007dd0:	782c      	ldrb	r4, [r5, #0]
 8007dd2:	2601      	movs	r6, #1
 8007dd4:	1c85      	adds	r5, r0, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d057      	beq.n	8007e8a <_strtoul_l.constprop.0+0xd6>
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d109      	bne.n	8007df2 <_strtoul_l.constprop.0+0x3e>
 8007dde:	2c30      	cmp	r4, #48	; 0x30
 8007de0:	d107      	bne.n	8007df2 <_strtoul_l.constprop.0+0x3e>
 8007de2:	7828      	ldrb	r0, [r5, #0]
 8007de4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007de8:	2858      	cmp	r0, #88	; 0x58
 8007dea:	d149      	bne.n	8007e80 <_strtoul_l.constprop.0+0xcc>
 8007dec:	786c      	ldrb	r4, [r5, #1]
 8007dee:	2310      	movs	r3, #16
 8007df0:	3502      	adds	r5, #2
 8007df2:	f04f 38ff 	mov.w	r8, #4294967295
 8007df6:	2700      	movs	r7, #0
 8007df8:	fbb8 f8f3 	udiv	r8, r8, r3
 8007dfc:	fb03 f908 	mul.w	r9, r3, r8
 8007e00:	ea6f 0909 	mvn.w	r9, r9
 8007e04:	4638      	mov	r0, r7
 8007e06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007e0a:	f1bc 0f09 	cmp.w	ip, #9
 8007e0e:	d815      	bhi.n	8007e3c <_strtoul_l.constprop.0+0x88>
 8007e10:	4664      	mov	r4, ip
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	dd23      	ble.n	8007e5e <_strtoul_l.constprop.0+0xaa>
 8007e16:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007e1a:	d007      	beq.n	8007e2c <_strtoul_l.constprop.0+0x78>
 8007e1c:	4580      	cmp	r8, r0
 8007e1e:	d31b      	bcc.n	8007e58 <_strtoul_l.constprop.0+0xa4>
 8007e20:	d101      	bne.n	8007e26 <_strtoul_l.constprop.0+0x72>
 8007e22:	45a1      	cmp	r9, r4
 8007e24:	db18      	blt.n	8007e58 <_strtoul_l.constprop.0+0xa4>
 8007e26:	fb00 4003 	mla	r0, r0, r3, r4
 8007e2a:	2701      	movs	r7, #1
 8007e2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e30:	e7e9      	b.n	8007e06 <_strtoul_l.constprop.0+0x52>
 8007e32:	2c2b      	cmp	r4, #43	; 0x2b
 8007e34:	bf04      	itt	eq
 8007e36:	782c      	ldrbeq	r4, [r5, #0]
 8007e38:	1c85      	addeq	r5, r0, #2
 8007e3a:	e7cc      	b.n	8007dd6 <_strtoul_l.constprop.0+0x22>
 8007e3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007e40:	f1bc 0f19 	cmp.w	ip, #25
 8007e44:	d801      	bhi.n	8007e4a <_strtoul_l.constprop.0+0x96>
 8007e46:	3c37      	subs	r4, #55	; 0x37
 8007e48:	e7e3      	b.n	8007e12 <_strtoul_l.constprop.0+0x5e>
 8007e4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e4e:	f1bc 0f19 	cmp.w	ip, #25
 8007e52:	d804      	bhi.n	8007e5e <_strtoul_l.constprop.0+0xaa>
 8007e54:	3c57      	subs	r4, #87	; 0x57
 8007e56:	e7dc      	b.n	8007e12 <_strtoul_l.constprop.0+0x5e>
 8007e58:	f04f 37ff 	mov.w	r7, #4294967295
 8007e5c:	e7e6      	b.n	8007e2c <_strtoul_l.constprop.0+0x78>
 8007e5e:	1c7b      	adds	r3, r7, #1
 8007e60:	d106      	bne.n	8007e70 <_strtoul_l.constprop.0+0xbc>
 8007e62:	2322      	movs	r3, #34	; 0x22
 8007e64:	f8ce 3000 	str.w	r3, [lr]
 8007e68:	4638      	mov	r0, r7
 8007e6a:	b932      	cbnz	r2, 8007e7a <_strtoul_l.constprop.0+0xc6>
 8007e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e70:	b106      	cbz	r6, 8007e74 <_strtoul_l.constprop.0+0xc0>
 8007e72:	4240      	negs	r0, r0
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	d0f9      	beq.n	8007e6c <_strtoul_l.constprop.0+0xb8>
 8007e78:	b107      	cbz	r7, 8007e7c <_strtoul_l.constprop.0+0xc8>
 8007e7a:	1e69      	subs	r1, r5, #1
 8007e7c:	6011      	str	r1, [r2, #0]
 8007e7e:	e7f5      	b.n	8007e6c <_strtoul_l.constprop.0+0xb8>
 8007e80:	2430      	movs	r4, #48	; 0x30
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1b5      	bne.n	8007df2 <_strtoul_l.constprop.0+0x3e>
 8007e86:	2308      	movs	r3, #8
 8007e88:	e7b3      	b.n	8007df2 <_strtoul_l.constprop.0+0x3e>
 8007e8a:	2c30      	cmp	r4, #48	; 0x30
 8007e8c:	d0a9      	beq.n	8007de2 <_strtoul_l.constprop.0+0x2e>
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e7af      	b.n	8007df2 <_strtoul_l.constprop.0+0x3e>
 8007e92:	bf00      	nop
 8007e94:	08007f21 	.word	0x08007f21

08007e98 <_strtoul_r>:
 8007e98:	f7ff bf8c 	b.w	8007db4 <_strtoul_l.constprop.0>

08007e9c <_malloc_usable_size_r>:
 8007e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea0:	1f18      	subs	r0, r3, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfbc      	itt	lt
 8007ea6:	580b      	ldrlt	r3, [r1, r0]
 8007ea8:	18c0      	addlt	r0, r0, r3
 8007eaa:	4770      	bx	lr

08007eac <_init>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr

08007eb8 <_fini>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr
